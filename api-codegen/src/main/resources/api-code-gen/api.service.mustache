{{>licenseInfo}}

{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}
import { BaseApi } from './base.api';

{{#operations}}/**
* {{baseName}} service.
* @module {{#invokerPackage}}{{&invokerPackage}}/{{/invokerPackage}}{{#apiPackage}}{{&apiPackage}}/{{/apiPackage}}{{classname}}
*/
export class {{classname}} extends BaseApi {
    {{#operation}}/**
    * {{&summary}}
    * {{&description}}
    * {{&notes}}{{#allParams}}
    * @param {{paramName}} {{&description}}{{/allParams}}
    */
    {{nickname}}({{vendorExtensions.x-codegen-argList}}) : Promise<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
        {{#hasOptionalParams}}opts = opts || {};{{/hasOptionalParams}}
        let postBody = {{#bodyParam}}{{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#allParams}}{{#required}}
        if ({{paramName}} === undefined || {{paramName}} === null) {
            throw new Error("Required param '{{paramName}}' in {{operationId}}");
        }
        {{/required}}{{/allParams}}
        let pathParams = {
            {{#pathParams}}
            '{{baseName}}': {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{#hasMore}},{{/hasMore}}{{/pathParams}}
        };
        let queryParams = { {{#queryParams}}{{^collectionFormat}}
            '{{baseName}}': {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}},{{/collectionFormat}}{{/queryParams}}
        };
        let collectionQueryParams = { {{#queryParams}}{{#collectionFormat}}
            '{{baseName}}': {
                value: {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}},
                collectionFormat: '{{collectionFormat}}'
            }{{#hasMore}},{{/hasMore}}{{/collectionFormat}}{{/queryParams}}
        };
        let headerParams = {
            {{#headerParams}}
            '{{baseName}}': {{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{#hasMore}},{{/hasMore}}{{/headerParams}}
        };
        let formParams = { {{#formParams}}
        '{{baseName}}': {{#collectionFormat}}this.apiClient.buildCollectionParam({{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}, '{{collectionFormat}}'){{/collectionFormat}}{{^collectionFormat}}{{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{/collectionFormat}}{{#hasMore}},{{/hasMore}}{{/formParams}}
        };

        let contentTypes = [{{#consumes}}'{{& mediaType}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}];
        let accepts = [{{#produces}}'{{& mediaType}}'{{#hasMore}}, {{/hasMore}}{{/produces}}];

        return this.apiClient.callApi(
        '{{&path}}', '{{httpMethod}}',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        contentTypes, accepts)
    }
{{/operation}}

}
{{/operations}}
