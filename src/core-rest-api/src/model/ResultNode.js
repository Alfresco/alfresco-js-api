/**
 * Alfresco Content Services REST API
 * **Search API**  Provides access to the search features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../../../alfrescoApiClient', '../model/ContentInfo', '../model/Node', '../model/PathInfo', '../model/SearchEntry', '../model/UserInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../../alfrescoApiClient'), require('./ContentInfo'), require('./Node'), require('./PathInfo'), require('./SearchEntry'), require('./UserInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.AlfrescoContentServicesRestApi) {
      root.AlfrescoContentServicesRestApi = {};
    }
    root.AlfrescoContentServicesRestApi.ResultNode = factory(root.AlfrescoContentServicesRestApi.ApiClient, root.AlfrescoContentServicesRestApi.ContentInfo, root.AlfrescoContentServicesRestApi.Node, root.AlfrescoContentServicesRestApi.PathInfo, root.AlfrescoContentServicesRestApi.SearchEntry, root.AlfrescoContentServicesRestApi.UserInfo);
  }
}(this, function(ApiClient, ContentInfo, Node, PathInfo, SearchEntry, UserInfo) {
  'use strict';




  /**
   * The ResultNode model module.
   * @module model/ResultNode
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>ResultNode</code>.
   * @alias module:model/ResultNode
   * @class
   * @implements module:model/Node
   * @param id {string}
   * @param name {string} The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name.
   * @param nodeType {string}
   * @param isFolder {boolean}
   * @param isFile {boolean}
   * @param modifiedAt {Date}
   * @param modifiedByUser {module:model/UserInfo}
   * @param createdAt {Date}
   * @param createdByUser {module:model/UserInfo}
   */
  var exports = function(id, name, nodeType, isFolder, isFile, modifiedAt, modifiedByUser, createdAt, createdByUser) {
    var _this = this;

    Node.call(_this, id, name, nodeType, isFolder, isFile, modifiedAt, modifiedByUser, createdAt, createdByUser);





  };

  /**
   * Constructs a <code>ResultNode</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {any} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ResultNode} obj Optional instance to populate.
   * @return {module:model/ResultNode} The populated <code>ResultNode</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Node.constructFromObject(data, obj);
      if (data.hasOwnProperty('search')) {
        obj['search'] = SearchEntry.constructFromObject(data['search']);
      }
      if (data.hasOwnProperty('archivedByUser')) {
        obj['archivedByUser'] = UserInfo.constructFromObject(data['archivedByUser']);
      }
      if (data.hasOwnProperty('archivedAt')) {
        obj['archivedAt'] = ApiClient.convertToType(data['archivedAt'], 'Date');
      }
      if (data.hasOwnProperty('versionLabel')) {
        obj['versionLabel'] = ApiClient.convertToType(data['versionLabel'], 'String');
      }
      if (data.hasOwnProperty('versionComment')) {
        obj['versionComment'] = ApiClient.convertToType(data['versionComment'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/SearchEntry} search
   */
  exports.prototype['search'] = undefined;
  /**
   * @member {module:model/UserInfo} archivedByUser
   */
  exports.prototype['archivedByUser'] = undefined;
  /**
   * @member {Date} archivedAt
   */
  exports.prototype['archivedAt'] = undefined;
  /**
   * @member {string} versionLabel
   */
  exports.prototype['versionLabel'] = undefined;
  /**
   * @member {string} versionComment
   */
  exports.prototype['versionComment'] = undefined;

  // Implement Node interface:
  /**
   * @member {string} id
   */
exports.prototype['id'] = undefined;

  /**
   * The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name.
   * @member {string} name
   */
exports.prototype['name'] = undefined;

  /**
   * @member {string} nodeType
   */
exports.prototype['nodeType'] = undefined;

  /**
   * @member {boolean} isFolder
   */
exports.prototype['isFolder'] = undefined;

  /**
   * @member {boolean} isFile
   */
exports.prototype['isFile'] = undefined;

  /**
   * @member {boolean} isLocked
   * @default false
   */
exports.prototype['isLocked'] = false;

  /**
   * @member {Date} modifiedAt
   */
exports.prototype['modifiedAt'] = undefined;

  /**
   * @member {module:model/UserInfo} modifiedByUser
   */
exports.prototype['modifiedByUser'] = undefined;

  /**
   * @member {Date} createdAt
   */
exports.prototype['createdAt'] = undefined;

  /**
   * @member {module:model/UserInfo} createdByUser
   */
exports.prototype['createdByUser'] = undefined;

  /**
   * @member {string} parentId
   */
exports.prototype['parentId'] = undefined;

  /**
   * @member {boolean} isLink
   */
exports.prototype['isLink'] = undefined;

  /**
   * @member {module:model/ContentInfo} content
   */
exports.prototype['content'] = undefined;

  /**
   * @member {string[]} aspectNames
   */
exports.prototype['aspectNames'] = undefined;

  /**
   * @member {any} properties
   */
exports.prototype['properties'] = undefined;

  /**
   * @member {string[]} allowableOperations
   */
exports.prototype['allowableOperations'] = undefined;

  /**
   * @member {module:model/PathInfo} path
   */
exports.prototype['path'] = undefined;



  return exports;
}));


