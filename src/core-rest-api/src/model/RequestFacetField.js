/**
 * Alfresco Content Services REST API
 * **Search API**  Provides access to the search features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../../../alfrescoApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../../alfrescoApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AlfrescoContentServicesRestApi) {
      root.AlfrescoContentServicesRestApi = {};
    }
    root.AlfrescoContentServicesRestApi.RequestFacetField = factory(root.AlfrescoContentServicesRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The RequestFacetField model module.
   * @module model/RequestFacetField
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>RequestFacetField</code>.
   * A simple facet field
   * @alias module:model/RequestFacetField
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>RequestFacetField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {any} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RequestFacetField} obj Optional instance to populate.
   * @return {module:model/RequestFacetField} The populated <code>RequestFacetField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('field')) {
        obj['field'] = ApiClient.convertToType(data['field'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('prefix')) {
        obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
      }
      if (data.hasOwnProperty('sort')) {
        obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
      }
      if (data.hasOwnProperty('method')) {
        obj['method'] = ApiClient.convertToType(data['method'], 'String');
      }
      if (data.hasOwnProperty('missing')) {
        obj['missing'] = ApiClient.convertToType(data['missing'], 'Boolean');
      }
      if (data.hasOwnProperty('limit')) {
        obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
      }
      if (data.hasOwnProperty('mincount')) {
        obj['mincount'] = ApiClient.convertToType(data['mincount'], 'Number');
      }
      if (data.hasOwnProperty('facetEnumCacheMinDf')) {
        obj['facetEnumCacheMinDf'] = ApiClient.convertToType(data['facetEnumCacheMinDf'], 'Number');
      }
      if (data.hasOwnProperty('excludeFilters')) {
        obj['excludeFilters'] = ApiClient.convertToType(data['excludeFilters'], ['String']);
      }
    }
    return obj;
  }

  /**
   * The facet field
   * @member {string} field
   */
  exports.prototype['field'] = undefined;
  /**
   * A label to include in place of the facet field
   * @member {string} label
   */
  exports.prototype['label'] = undefined;
  /**
   * Restricts the possible constraints to only indexed values with a specified prefix.
   * @member {string} prefix
   */
  exports.prototype['prefix'] = undefined;
  /**
   * @member {module:model/RequestFacetField.SortEnum} sort
   */
  exports.prototype['sort'] = undefined;
  /**
   * @member {module:model/RequestFacetField.MethodEnum} method
   */
  exports.prototype['method'] = undefined;
  /**
   * When true, count results that match the query but which have no facet value for the field (in addition to the Term-based constraints).
   * @member {boolean} missing
   * @default false
   */
  exports.prototype['missing'] = false;
  /**
   * @member {number} limit
   */
  exports.prototype['limit'] = undefined;
  /**
   * @member {number} offset
   */
  exports.prototype['offset'] = undefined;
  /**
   * The minimum count required for a facet field to be included in the response.
   * @member {number} mincount
   */
  exports.prototype['mincount'] = undefined;
  /**
   * @member {number} facetEnumCacheMinDf
   */
  exports.prototype['facetEnumCacheMinDf'] = undefined;
  /**
   * Filter Queries with tags listed here will not be included in facet counts. This is used for multi-select facetting.
   * @member {string[]} excludeFilters
   */
  exports.prototype['excludeFilters'] = undefined;


  /**
   * Allowed values for the <code>sort</code> property.
   * @enum {string}
   * @readonly
   */
  exports.SortEnum = {
    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT",
    /**
     * value: "INDEX"
     * @const
     */
    "INDEX": "INDEX"  };

  /**
   * Allowed values for the <code>method</code> property.
   * @enum {string}
   * @readonly
   */
  exports.MethodEnum = {
    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",
    /**
     * value: "FC"
     * @const
     */
    "FC": "FC"  };


  return exports;
}));


