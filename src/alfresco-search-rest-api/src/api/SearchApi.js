/**
 * Alfresco Content Services REST API
 * **Search API**  Provides access to the search features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../../../alfrescoApiClient', '../model/Error', '../model/QueryBody', '../model/ResultSetPaging'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../../alfrescoApiClient'), require('../model/Error'), require('../model/QueryBody'), require('../model/ResultSetPaging'));
  } else {
    // Browser globals (root is window)
    if (!root.AlfrescoContentServicesRestApi) {
      root.AlfrescoContentServicesRestApi = {};
    }
    root.AlfrescoContentServicesRestApi.SearchApi = factory(root.AlfrescoContentServicesRestApi.ApiClient, root.AlfrescoContentServicesRestApi.Error, root.AlfrescoContentServicesRestApi.QueryBody, root.AlfrescoContentServicesRestApi.ResultSetPaging);
  }
}(this, function(ApiClient, Error, QueryBody, ResultSetPaging) {
  'use strict';

  /**
   * Search service.
   * @module api/SearchApi
   * @version 1
   */

  /**
   * Constructs a new SearchApi. 
   * @alias module:api/SearchApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/SearchApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSetPaging} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches Alfresco
     * **Note**: this endpoint is available in Alfresco 5.2 and newer versions.  **You specify all the parameters in this API in a JSON body**, URL parameters are not supported. A basic query looks like this:  &#x60;&#x60;&#x60;JSON {   \&quot;query\&quot;: {     \&quot;query\&quot;: \&quot;foo\&quot;   } } &#x60;&#x60;&#x60;  **Note:** These are the minimum possible query parameters.  The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.  A basic CMIS query looks like this:  &#x60;&#x60;&#x60;JSON {   \&quot;query\&quot;: {     \&quot;query\&quot;: \&quot;select * from cmis:folder\&quot;,     \&quot;language\&quot;: \&quot;cmis\&quot;   } } &#x60;&#x60;&#x60;  By default, **results are limited to the first 100.** Results can be restricted using \&quot;paging\&quot;. For example: &#x60;&#x60;&#x60;JSON \&quot;paging\&quot;: {   \&quot;maxItems\&quot;: \&quot;50\&quot;,   \&quot;skipCount\&quot;: \&quot;28\&quot; } &#x60;&#x60;&#x60; This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.  Alternatively, you can limit the results by using the **limits JSON body parameter**. For example, &#x60;&#x60;&#x60;JSON \&quot;limits\&quot;: {   \&quot;permissionEvaluationTime\&quot;: 20000,   \&quot;permissionEvaluationCount\&quot;: 2000 } &#x60;&#x60;&#x60;  You can use the **include JSON body parameter** to return additional information. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: &#x60;&#x60;&#x60;JSON \&quot;include\&quot;: [\&quot;aspectNames\&quot;, \&quot;properties\&quot;, \&quot;isLink\&quot;] &#x60;&#x60;&#x60;  You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: &#x60;&#x60;&#x60;JSON \&quot;fields\&quot;: [\&quot;id\&quot;, \&quot;name\&quot;, \&quot;search\&quot;] &#x60;&#x60;&#x60;  You can sort the results using the **sort JSON body parameter**, for example: &#x60;&#x60;&#x60;JSON \&quot;sort\&quot;: [{\&quot;type\&quot;:\&quot;FIELD\&quot;, \&quot;field\&quot;:\&quot;cm:description\&quot;, \&quot;ascending\&quot;:\&quot;true\&quot;}] &#x60;&#x60;&#x60; **Note:** the **sort** parameter is not supported for CMIS queries.  By default, search uses the **\&quot;nodes\&quot; location**, which is the **content store known as workspace://SpacesStore**. To change the scope to another location you can use the **locations JSON body parameter**. You can specify either **nodes** (the default), **versions** or **deleted-nodes**.  For example, &#x60;&#x60;&#x60;JSON \&quot;scope\&quot;: {     \&quot;locations\&quot;: [\&quot;deleted-nodes\&quot;] } &#x60;&#x60;&#x60; You can specify templates using the **templates JSON body parameter**, for example: &#x60;&#x60;&#x60;JSON \&quot;templates\&quot;: [{\&quot;name\&quot;: \&quot;_PERSON\&quot;,\&quot;template\&quot;: \&quot;|%firstName OR |%lastName OR |%userName\&quot;},               {\&quot;name\&quot;: \&quot;mytemplate\&quot;,\&quot;template\&quot;: \&quot;%cm:content\&quot;}] &#x60;&#x60;&#x60;  For **spell checking** you can use a query like this: &#x60;&#x60;&#x60;JSON {   \&quot;query\&quot;: {     \&quot;query\&quot;: \&quot;cm:title:alfrezco\&quot;,     \&quot;language\&quot;: \&quot;afts\&quot;   },   \&quot;spellcheck\&quot;: {\&quot;query\&quot;: \&quot;alfrezco\&quot;} } &#x60;&#x60;&#x60;  If you are already specifying \&quot;userQuery\&quot; then the following may be easier and produces the same result : &#x60;&#x60;&#x60;JSON {   \&quot;query\&quot;: {     \&quot;query\&quot;: \&quot;cm:title:alfrezco\&quot;,     \&quot;userQuery\&quot;: \&quot;alfrezco\&quot;,     \&quot;language\&quot;: \&quot;afts\&quot;   },   \&quot;spellcheck\&quot;: {} } &#x60;&#x60;&#x60;  The spellcheck response includes a spellCheck context like this: &#x60;&#x60;&#x60;JSON \&quot;context\&quot;: {   \&quot;spellCheck\&quot;: {     \&quot;type\&quot;: \&quot;searchInsteadFor\&quot;,     \&quot;suggestions\&quot;: [\&quot;alfresco\&quot;]   } }, &#x60;&#x60;&#x60;  To specify defaults, you  use a **defaults JSON body parameter**, for example: &#x60;&#x60;&#x60;JSON \&quot;defaults\&quot;: {   \&quot;textAttributes\&quot;: [     \&quot;cm:content\&quot;, \&quot;cm:name\&quot;   ],   \&quot;defaultFTSOperator\&quot;: \&quot;AND\&quot;,   \&quot;defaultFTSFieldOperator\&quot;: \&quot;OR\&quot;,   \&quot;namespace\&quot;: \&quot;cm\&quot;,   \&quot;defaultFieldName\&quot;: \&quot;PATH\&quot; } &#x60;&#x60;&#x60;  You can specify several filter queries using the **filterQueries JSON body parameter**, for example: &#x60;&#x60;&#x60;JSON \&quot;filterQueries\&quot;: [{\&quot;query\&quot;: \&quot;TYPE:&#39;cm:folder&#39;\&quot;},{\&quot;query\&quot;: \&quot;cm:creator:mjackson\&quot;}] &#x60;&#x60;&#x60;  You can specify several facet queries using the **facetQueries JSON body parameter**, for example: &#x60;&#x60;&#x60;JSON \&quot;facetQueries\&quot;: [{\&quot;query\&quot;: \&quot;created:2016\&quot;,\&quot;label\&quot;: \&quot;CreatedThisYear\&quot;}] &#x60;&#x60;&#x60; The response will contain a matching \&quot;context\&quot; section, the \&quot;label\&quot; will match the facet query. &#x60;&#x60;&#x60;JSON \&quot;context\&quot;: {   \&quot;facetQueries\&quot;: [     {\&quot;label\&quot;: \&quot;CreatedThisYear\&quot;,\&quot;count\&quot;: 3}   ] }, &#x60;&#x60;&#x60;  A complete query for facetting via the content.size field looks this: &#x60;&#x60;&#x60;JSON {   \&quot;query\&quot;: {     \&quot;query\&quot;: \&quot;presentation\&quot;,     \&quot;language\&quot;: \&quot;afts\&quot;   },     \&quot;facetQueries\&quot;: [         {\&quot;query\&quot;: \&quot;content.size:[0 TO 10240]\&quot;, \&quot;label\&quot;: \&quot;xtra small\&quot;},         {\&quot;query\&quot;: \&quot;content.size:[10240 TO 102400]\&quot;, \&quot;label\&quot;: \&quot;small\&quot;},         {\&quot;query\&quot;: \&quot;content.size:[102400 TO 1048576]\&quot;, \&quot;label\&quot;: \&quot;medium\&quot;},         {\&quot;query\&quot;: \&quot;content.size:[1048576 TO 16777216]\&quot;, \&quot;label\&quot;: \&quot;large\&quot;},         {\&quot;query\&quot;: \&quot;content.size:[16777216 TO 134217728]\&quot;, \&quot;label\&quot;: \&quot;xtra large\&quot;},         {\&quot;query\&quot;: \&quot;content.size:[134217728 TO MAX]\&quot;, \&quot;label\&quot;: \&quot;XX large\&quot;}   ],     \&quot;facetFields\&quot;: {\&quot;facets\&quot;: [{\&quot;field\&quot;: \&quot;&#39;content.size&#39;\&quot;}]} } &#x60;&#x60;&#x60;  The response will contain a matching \&quot;context\&quot; section, the \&quot;label\&quot; will match the facet query. &#x60;&#x60;&#x60;JSON \&quot;context\&quot;: {   \&quot;facetQueries\&quot;: [     { \&quot;label\&quot;: \&quot;small\&quot;,\&quot;count\&quot;: 2 },     { \&quot;label\&quot;: \&quot;large\&quot;,\&quot;count\&quot;: 0 },     { \&quot;label\&quot;: \&quot;xtra small\&quot;,\&quot;count\&quot;: 5 },     { \&quot;label\&quot;: \&quot;xtra large\&quot;,\&quot;count\&quot;: 56},     { \&quot;label\&quot;: \&quot;medium\&quot;,\&quot;count\&quot;: 4 },     { \&quot;label\&quot;: \&quot;XX large\&quot;, \&quot;count\&quot;: 1 }   ] }, &#x60;&#x60;&#x60;  You can specify several facet fields using the **facetFields JSON body parameter**, for example: &#x60;&#x60;&#x60;JSON \&quot;facetFields\&quot;: {\&quot;facets\&quot;: [{\&quot;field\&quot;: \&quot;creator\&quot;, \&quot;mincount\&quot;: 1}, {\&quot;field\&quot;: \&quot;modifier\&quot;, \&quot;mincount\&quot;: 1}]} &#x60;&#x60;&#x60; The response will contain a matching \&quot;context\&quot; section, the \&quot;label\&quot; will match the facet field. &#x60;&#x60;&#x60;JSON \&quot;context\&quot;: {    \&quot;facetsFields\&quot;: [      {  \&quot;label\&quot;: \&quot;creator\&quot;,         \&quot;buckets\&quot;: [           { \&quot;label\&quot;: \&quot;System\&quot;, \&quot;count\&quot;: 75 },           { \&quot;label\&quot;: \&quot;mjackson\&quot;, \&quot;count\&quot;: 5 }         ]},      {  \&quot;label\&quot;: \&quot;modifier\&quot;,         \&quot;buckets\&quot;: [           { \&quot;label\&quot;: \&quot;System\&quot;, \&quot;count\&quot;: 72 },           { \&quot;label\&quot;: \&quot;mjackson\&quot;, \&quot;count\&quot;: 5 },           { \&quot;label\&quot;: \&quot;admin\&quot;, \&quot;count\&quot;: 3 }         ]}    ] }, &#x60;&#x60;&#x60; An example query for **search highlighting** could look like this: &#x60;&#x60;&#x60;JSON {   \&quot;query\&quot;: {     \&quot;query\&quot;: \&quot;description:workflow\&quot;,     \&quot;userQuery\&quot;:\&quot;workflow\&quot;   },   \&quot;highlight\&quot;: {     \&quot;prefix\&quot;: \&quot;¿\&quot;,     \&quot;postfix\&quot;: \&quot;?\&quot;,     \&quot;mergeContiguous\&quot;: true,     \&quot;fields\&quot;: [       {         \&quot;field\&quot;: \&quot;cm:title\&quot;       },       {         \&quot;field\&quot;: \&quot;description\&quot;,         \&quot;prefix\&quot;: \&quot;(\&quot;,         \&quot;postfix\&quot;: \&quot;)\&quot;       }      ]   } } &#x60;&#x60;&#x60; The example above changes the highlighting prefix and postfix from the  default &lt;em&gt; for all fields to ¿? and just for the \&quot;description\&quot; field to ().  The hightlight information is added in each node entry response; here is  an example partial response: &#x60;&#x60;&#x60; \&quot;entry\&quot;: {         \&quot;createdAt\&quot;: \&quot;2016-10-12T15:24:31.202+0000\&quot;,         \&quot;isFolder\&quot;: true,         \&quot;search\&quot;: {           \&quot;score\&quot;: 1,           \&quot;highlight\&quot;: [             {               \&quot;field\&quot;: \&quot;cm:title\&quot;,               \&quot;snippets\&quot;: [                 \&quot;Customized ¿Workflow? Process Definitions\&quot;               ]             },             {               \&quot;field\&quot;: \&quot;description\&quot;,               \&quot;snippets\&quot;: [                 \&quot;Customized (Workflow) Process Definitions\&quot;               ]             }           ]       }, &#x60;&#x60;&#x60; 
     * @param {module:model/QueryBody} queryBody Generic query API 
     * @param {module:api/SearchApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSetPaging}
     */
    this.search = function(queryBody, callback) {
      var postBody = queryBody;

      // verify the required parameter 'queryBody' is set
      if (queryBody == undefined || queryBody == null) {
        throw new Error("Missing the required parameter 'queryBody' when calling search");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultSetPaging;

      return this.apiClient.callApi(
        '/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
