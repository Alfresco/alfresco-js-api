/**
 * Alfresco Content Services REST API
 * **Search API**  Provides access to the search features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../../../alfrescoApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../../alfrescoApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AlfrescoContentServicesRestApi) {
      root.AlfrescoContentServicesRestApi = {};
    }
    root.AlfrescoContentServicesRestApi.RequestStats = factory(root.AlfrescoContentServicesRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The RequestStats model module.
   * @module model/RequestStats
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>RequestStats</code>.
   * A list of stats request.
   * @alias module:model/RequestStats
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>RequestStats</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {any} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RequestStats} obj Optional instance to populate.
   * @return {module:model/RequestStats} The populated <code>RequestStats</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('field')) {
        obj['field'] = ApiClient.convertToType(data['field'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('min')) {
        obj['min'] = ApiClient.convertToType(data['min'], 'Boolean');
      }
      if (data.hasOwnProperty('max')) {
        obj['max'] = ApiClient.convertToType(data['max'], 'Boolean');
      }
      if (data.hasOwnProperty('sum')) {
        obj['sum'] = ApiClient.convertToType(data['sum'], 'Boolean');
      }
      if (data.hasOwnProperty('countValues')) {
        obj['countValues'] = ApiClient.convertToType(data['countValues'], 'Boolean');
      }
      if (data.hasOwnProperty('missing')) {
        obj['missing'] = ApiClient.convertToType(data['missing'], 'Boolean');
      }
      if (data.hasOwnProperty('mean')) {
        obj['mean'] = ApiClient.convertToType(data['mean'], 'Boolean');
      }
      if (data.hasOwnProperty('stddev')) {
        obj['stddev'] = ApiClient.convertToType(data['stddev'], 'Boolean');
      }
      if (data.hasOwnProperty('sumOfSquares')) {
        obj['sumOfSquares'] = ApiClient.convertToType(data['sumOfSquares'], 'Boolean');
      }
      if (data.hasOwnProperty('distinctValues')) {
        obj['distinctValues'] = ApiClient.convertToType(data['distinctValues'], 'Boolean');
      }
      if (data.hasOwnProperty('countDistinct')) {
        obj['countDistinct'] = ApiClient.convertToType(data['countDistinct'], 'Boolean');
      }
      if (data.hasOwnProperty('cardinality')) {
        obj['cardinality'] = ApiClient.convertToType(data['cardinality'], 'Boolean');
      }
      if (data.hasOwnProperty('cardinalityAccuracy')) {
        obj['cardinalityAccuracy'] = ApiClient.convertToType(data['cardinalityAccuracy'], 'Number');
      }
      if (data.hasOwnProperty('excludeFilters')) {
        obj['excludeFilters'] = ApiClient.convertToType(data['excludeFilters'], ['String']);
      }
      if (data.hasOwnProperty('percentiles')) {
        obj['percentiles'] = ApiClient.convertToType(data['percentiles'], ['Number']);
      }
    }
    return obj;
  }

  /**
   * The stats field
   * @member {string} field
   */
  exports.prototype['field'] = undefined;
  /**
   * A label to include for reference the stats field
   * @member {string} label
   */
  exports.prototype['label'] = undefined;
  /**
   * The minimum value of the field
   * @member {boolean} min
   * @default true
   */
  exports.prototype['min'] = true;
  /**
   * The maximum value of the field
   * @member {boolean} max
   * @default true
   */
  exports.prototype['max'] = true;
  /**
   * The sum of all values of the field
   * @member {boolean} sum
   * @default true
   */
  exports.prototype['sum'] = true;
  /**
   * The number which have a value for this field
   * @member {boolean} countValues
   * @default true
   */
  exports.prototype['countValues'] = true;
  /**
   * The number which do not have a value for this field
   * @member {boolean} missing
   * @default true
   */
  exports.prototype['missing'] = true;
  /**
   * The average
   * @member {boolean} mean
   * @default true
   */
  exports.prototype['mean'] = true;
  /**
   * Standard deviation
   * @member {boolean} stddev
   * @default true
   */
  exports.prototype['stddev'] = true;
  /**
   * Sum of all values squared
   * @member {boolean} sumOfSquares
   * @default true
   */
  exports.prototype['sumOfSquares'] = true;
  /**
   * The set of all distinct values for the field (This can be very expensive to calculate)
   * @member {boolean} distinctValues
   * @default false
   */
  exports.prototype['distinctValues'] = false;
  /**
   * The number of distinct values  (This can be very expensive to calculate)
   * @member {boolean} countDistinct
   * @default false
   */
  exports.prototype['countDistinct'] = false;
  /**
   * A statistical approximation of the number of distinct values
   * @member {boolean} cardinality
   * @default false
   */
  exports.prototype['cardinality'] = false;
  /**
   * Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.
   * @member {number} cardinalityAccuracy
   * @default 0.3
   */
  exports.prototype['cardinalityAccuracy'] = 0.3;
  /**
   * A list of filters to exclude
   * @member {string[]} excludeFilters
   */
  exports.prototype['excludeFilters'] = undefined;
  /**
   * A list of percentile values, e.g. \"1,99,99.9\"
   * @member {number[]} percentiles
   */
  exports.prototype['percentiles'] = undefined;



  return exports;
}));


