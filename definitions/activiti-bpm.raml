#%RAML 0.8
title: Afresco Process Services API
version: 1.0
documentation:
- title: Afresco Process Services API Documentation
  content: Afresco Process Services API Documentation
baseUri: http://localhost:8080/activiti-app/raml/activiti.raml
baseUriParameters: {}
schemas:
- ResultListDataRepresentation: |
    {
      "id": "ResultListDataRepresentation",
      "title": "ResultListDataRepresentation",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- LightGroupRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "LightGroupRepresentation",
        "title": "LightGroupRepresentation",
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- GroupRepresentation: |
    {
      "id": "GroupRepresentation",
      "title": "GroupRepresentation",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "id": "GroupCapabilityRepresentation",
            "title": "GroupCapabilityRepresentation",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "externalId": {
          "type": "string",
          "format": "string"
        }
      }
    }
- AbstractGroupRepresentation: |
    {
      "id": "AbstractGroupRepresentation",
      "title": "AbstractGroupRepresentation",
      "type": "object",
      "properties": {
        "externalId": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "status": {
          "type": "string",
          "format": "string"
        }
      }
    }
- AddGroupCapabilitiesRepresentation: |
    {
      "id": "AddGroupCapabilitiesRepresentation",
      "title": "AddGroupCapabilitiesRepresentation",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- UserRepresentation: |
    {
      "id": "UserRepresentation",
      "title": "UserRepresentation",
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "id": "LightAppRepresentation",
            "title": "LightAppRepresentation",
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "format": "string"
              },
              "icon": {
                "type": "string",
                "format": "string"
              },
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string",
                "format": "string"
              },
              "theme": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "company": {
          "type": "string",
          "format": "string"
        },
        "created": {
          "type": "string",
          "format": "string"
        },
        "email": {
          "type": "string",
          "format": "string"
        },
        "externalId": {
          "type": "string",
          "format": "string"
        },
        "firstName": {
          "type": "string",
          "format": "string"
        },
        "fullname": {
          "type": "string",
          "format": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "id": "GroupRepresentation",
            "title": "GroupRepresentation",
            "type": "object",
            "properties": {
              "capabilities": {
                "type": "array",
                "items": {
                  "id": "GroupCapabilityRepresentation",
                  "title": "GroupCapabilityRepresentation",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "externalId": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string",
          "format": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "string"
        },
        "latestSyncTimeStamp": {
          "type": "string",
          "format": "string"
        },
        "password": {
          "type": "string",
          "format": "string"
        },
        "pictureId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryGroup": {
          "id": "GroupRepresentation",
          "title": "GroupRepresentation",
          "type": "object",
          "properties": {
            "capabilities": {
              "type": "array",
              "items": {
                "id": "GroupCapabilityRepresentation",
                "title": "GroupCapabilityRepresentation",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "externalId": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "status": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        },
        "tenantName": {
          "type": "string",
          "format": "string"
        },
        "tenantPictureId": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "format": "string"
        }
      }
    }
- ChangePasswordRepresentation: |
    {
      "id": "ChangePasswordRepresentation",
      "title": "ChangePasswordRepresentation",
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "format": "string"
        },
        "oldPassword": {
          "type": "string",
          "format": "string"
        }
      }
    }
- ImageUploadRepresentation: |
    {
      "id": "ImageUploadRepresentation",
      "title": "ImageUploadRepresentation",
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
- SyncLogEntryRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "SyncLogEntryRepresentation",
        "title": "SyncLogEntryRepresentation",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timeStamp": {
            "type": "string",
            "format": "string"
          },
          "type": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- BulkUserUpdateRepresentation: |
    {
      "id": "BulkUserUpdateRepresentation",
      "title": "BulkUserUpdateRepresentation",
      "type": "object",
      "properties": {
        "accountType": {
          "type": "string",
          "format": "string"
        },
        "password": {
          "type": "string",
          "format": "string"
        },
        "primaryGroupId": {
          "type": "integer",
          "format": "int64"
        },
        "sendNotifications": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    }
- AbstractUserRepresentation: |
    {
      "id": "AbstractUserRepresentation",
      "title": "AbstractUserRepresentation",
      "type": "object",
      "properties": {
        "company": {
          "type": "string",
          "format": "string"
        },
        "email": {
          "type": "string",
          "format": "string"
        },
        "externalId": {
          "type": "string",
          "format": "string"
        },
        "firstName": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string",
          "format": "string"
        },
        "pictureId": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
- RestVariable: |
    {
      "id": "RestVariable",
      "title": "RestVariable",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "string"
        },
        "scope": {
          "type": "string",
          "format": "string"
        },
        "type": {
          "type": "string",
          "format": "string"
        },
        "value": {
          "type": "object"
        }
      }
    }
- AppDefinitionUpdateResultRepresentation: |
    {
      "id": "AppDefinitionUpdateResultRepresentation",
      "title": "AppDefinitionUpdateResultRepresentation",
      "type": "object",
      "properties": {
        "appDefinition": {
          "id": "AppDefinitionRepresentation",
          "title": "AppDefinitionRepresentation",
          "type": "object",
          "properties": {
            "defaultAppId": {
              "type": "string",
              "format": "string"
            },
            "deploymentId": {
              "type": "string",
              "format": "string"
            },
            "description": {
              "type": "string",
              "format": "string"
            },
            "icon": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "modelId": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "tenantId": {
              "type": "integer",
              "format": "int64"
            },
            "theme": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "customData": {
          "type": "object"
        },
        "error": {
          "type": "boolean"
        },
        "errorDescription": {
          "type": "string",
          "format": "string"
        },
        "errorType": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "format": "string"
        },
        "messageKey": {
          "type": "string",
          "format": "string"
        }
      }
    }
- AppDefinitionRepresentation: |
    {
      "id": "AppDefinitionRepresentation",
      "title": "AppDefinitionRepresentation",
      "type": "object",
      "properties": {
        "defaultAppId": {
          "type": "string",
          "format": "string"
        },
        "deploymentId": {
          "type": "string",
          "format": "string"
        },
        "description": {
          "type": "string",
          "format": "string"
        },
        "icon": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "modelId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        },
        "theme": {
          "type": "string",
          "format": "string"
        }
      }
    }
- AppDefinitionSaveRepresentation: |
    {
      "id": "AppDefinitionSaveRepresentation",
      "title": "AppDefinitionSaveRepresentation",
      "type": "object",
      "properties": {
        "appDefinition": {
          "id": "AppDefinitionRepresentation",
          "title": "AppDefinitionRepresentation",
          "type": "object",
          "properties": {
            "defaultAppId": {
              "type": "string",
              "format": "string"
            },
            "deploymentId": {
              "type": "string",
              "format": "string"
            },
            "description": {
              "type": "string",
              "format": "string"
            },
            "icon": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "modelId": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "tenantId": {
              "type": "integer",
              "format": "int64"
            },
            "theme": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "force": {
          "type": "boolean"
        },
        "publish": {
          "type": "boolean"
        }
      }
    }
- DecisionAuditRepresentation: |
    {
      "id": "DecisionAuditRepresentation",
      "title": "DecisionAuditRepresentation",
      "type": "object",
      "properties": {
        "activityId": {
          "type": "string",
          "format": "string"
        },
        "activityName": {
          "type": "string",
          "format": "string"
        },
        "auditTrailJson": {
          "type": "string",
          "format": "string"
        },
        "created": {
          "type": "string",
          "format": "string"
        },
        "decisionExecutionFailed": {
          "type": "boolean"
        },
        "decisionKey": {
          "type": "string",
          "format": "string"
        },
        "decisionModelJson": {
          "type": "string",
          "format": "string"
        },
        "decisionName": {
          "type": "string",
          "format": "string"
        },
        "dmnDeploymentId": {
          "type": "integer",
          "format": "int64"
        },
        "executionId": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processInstanceId": {
          "type": "string",
          "format": "string"
        },
        "renderedVariables": {
          "type": "object"
        }
      }
    }
- FormRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "FormRepresentation",
        "title": "FormRepresentation",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "format": "string"
          },
          "formDefinition": {
            "id": "FormDefinitionRepresentation",
            "title": "FormDefinitionRepresentation",
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "format": "string"
              },
              "customFieldTemplates": {
                "type": "string",
                "format": "string"
              },
              "fields": {
                "type": "array",
                "items": {
                  "id": "FormFieldRepresentation",
                  "title": "FormFieldRepresentation",
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "format": "string"
                    },
                    "col": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "colspan": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "dateDisplayFormat": {
                      "type": "string",
                      "format": "string"
                    },
                    "hasEmptyValue": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string",
                      "format": "string"
                    },
                    "layout": {
                      "id": "LayoutRepresentation",
                      "title": "LayoutRepresentation",
                      "type": "object",
                      "properties": {
                        "colspan": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "column": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "row": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    },
                    "maxLength": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "maxValue": {
                      "type": "string",
                      "format": "string"
                    },
                    "minLength": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "minValue": {
                      "type": "string",
                      "format": "string"
                    },
                    "name": {
                      "type": "string",
                      "format": "string"
                    },
                    "optionType": {
                      "type": "string",
                      "format": "string"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "id": "OptionRepresentation",
                        "title": "OptionRepresentation",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "string"
                          },
                          "name": {
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    },
                    "overrideId": {
                      "type": "boolean"
                    },
                    "params": {
                      "type": "object"
                    },
                    "placeholder": {
                      "type": "string",
                      "format": "string"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "regexPattern": {
                      "type": "string",
                      "format": "string"
                    },
                    "required": {
                      "type": "boolean"
                    },
                    "restIdProperty": {
                      "type": "string",
                      "format": "string"
                    },
                    "restLabelProperty": {
                      "type": "string",
                      "format": "string"
                    },
                    "restResponsePath": {
                      "type": "string",
                      "format": "string"
                    },
                    "restUrl": {
                      "type": "string",
                      "format": "string"
                    },
                    "row": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "sizeX": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "sizeY": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "tab": {
                      "type": "string",
                      "format": "string"
                    },
                    "type": {
                      "type": "string",
                      "format": "string"
                    },
                    "value": {
                      "type": "object"
                    },
                    "visibilityCondition": {
                      "id": "ConditionRepresentation",
                      "title": "ConditionRepresentation",
                      "type": "object",
                      "properties": {
                        "leftFormFieldId": {
                          "type": "string",
                          "format": "string"
                        },
                        "leftRestResponseId": {
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "globalDateFormat": {
                "type": "string",
                "format": "string"
              },
              "gridsterForm": {
                "type": "boolean"
              },
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "javascriptEvents": {
                "type": "array",
                "items": {
                  "id": "FormJavascriptEventRepresentation",
                  "title": "FormJavascriptEventRepresentation",
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": "string",
                      "format": "string"
                    },
                    "javascriptLogic": {
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "metadata": {
                "type": "string",
                "format": "string"
              },
              "name": {
                "type": "string",
                "format": "string"
              },
              "outcomeTarget": {
                "type": "string",
                "format": "string"
              },
              "outcomes": {
                "type": "array",
                "items": {
                  "id": "FormOutcomeRepresentation",
                  "title": "FormOutcomeRepresentation",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "string"
                    },
                    "name": {
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "processDefinitionId": {
                "type": "string",
                "format": "string"
              },
              "processDefinitionKey": {
                "type": "string",
                "format": "string"
              },
              "processDefinitionName": {
                "type": "string",
                "format": "string"
              },
              "selectedOutcome": {
                "type": "string",
                "format": "string"
              },
              "style": {
                "type": "string",
                "format": "string"
              },
              "tabs": {
                "type": "array",
                "items": {
                  "id": "FormTabRepresentation",
                  "title": "FormTabRepresentation",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "string"
                    },
                    "title": {
                      "type": "string",
                      "format": "string"
                    },
                    "visibilityCondition": {
                      "id": "ConditionRepresentation",
                      "title": "ConditionRepresentation",
                      "type": "object",
                      "properties": {
                        "leftFormFieldId": {
                          "type": "string",
                          "format": "string"
                        },
                        "leftRestResponseId": {
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  }
                }
              },
              "taskDefinitionKey": {
                "type": "string",
                "format": "string"
              },
              "taskId": {
                "type": "string",
                "format": "string"
              },
              "taskName": {
                "type": "string",
                "format": "string"
              },
              "variables": {
                "type": "array",
                "items": {
                  "id": "FormVariableRepresentation",
                  "title": "FormVariableRepresentation",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "format": "string"
                    },
                    "type": {
                      "type": "string",
                      "format": "string"
                    },
                    "value": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "string"
          },
          "lastUpdatedBy": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedByFullName": {
            "type": "string",
            "format": "string"
          },
          "name": {
            "type": "string",
            "format": "string"
          },
          "referenceId": {
            "type": "integer",
            "format": "int64"
          },
          "stencilSetId": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
- FormRepresentation: |
    {
      "id": "FormRepresentation",
      "title": "FormRepresentation",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "format": "string"
        },
        "formDefinition": {
          "id": "FormDefinitionRepresentation",
          "title": "FormDefinitionRepresentation",
          "type": "object",
          "properties": {
            "className": {
              "type": "string",
              "format": "string"
            },
            "customFieldTemplates": {
              "type": "string",
              "format": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "id": "FormFieldRepresentation",
                "title": "FormFieldRepresentation",
                "type": "object",
                "properties": {
                  "className": {
                    "type": "string",
                    "format": "string"
                  },
                  "col": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "colspan": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "dateDisplayFormat": {
                    "type": "string",
                    "format": "string"
                  },
                  "hasEmptyValue": {
                    "type": "boolean"
                  },
                  "id": {
                    "type": "string",
                    "format": "string"
                  },
                  "layout": {
                    "id": "LayoutRepresentation",
                    "title": "LayoutRepresentation",
                    "type": "object",
                    "properties": {
                      "colspan": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "column": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "row": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "maxLength": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "maxValue": {
                    "type": "string",
                    "format": "string"
                  },
                  "minLength": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "minValue": {
                    "type": "string",
                    "format": "string"
                  },
                  "name": {
                    "type": "string",
                    "format": "string"
                  },
                  "optionType": {
                    "type": "string",
                    "format": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "id": "OptionRepresentation",
                      "title": "OptionRepresentation",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "string"
                        },
                        "name": {
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "overrideId": {
                    "type": "boolean"
                  },
                  "params": {
                    "type": "object"
                  },
                  "placeholder": {
                    "type": "string",
                    "format": "string"
                  },
                  "readOnly": {
                    "type": "boolean"
                  },
                  "regexPattern": {
                    "type": "string",
                    "format": "string"
                  },
                  "required": {
                    "type": "boolean"
                  },
                  "restIdProperty": {
                    "type": "string",
                    "format": "string"
                  },
                  "restLabelProperty": {
                    "type": "string",
                    "format": "string"
                  },
                  "restResponsePath": {
                    "type": "string",
                    "format": "string"
                  },
                  "restUrl": {
                    "type": "string",
                    "format": "string"
                  },
                  "row": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "sizeX": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "sizeY": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "tab": {
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "type": "object"
                  },
                  "visibilityCondition": {
                    "id": "ConditionRepresentation",
                    "title": "ConditionRepresentation",
                    "type": "object",
                    "properties": {
                      "leftFormFieldId": {
                        "type": "string",
                        "format": "string"
                      },
                      "leftRestResponseId": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "globalDateFormat": {
              "type": "string",
              "format": "string"
            },
            "gridsterForm": {
              "type": "boolean"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "javascriptEvents": {
              "type": "array",
              "items": {
                "id": "FormJavascriptEventRepresentation",
                "title": "FormJavascriptEventRepresentation",
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "format": "string"
                  },
                  "javascriptLogic": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "metadata": {
              "type": "string",
              "format": "string"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "outcomeTarget": {
              "type": "string",
              "format": "string"
            },
            "outcomes": {
              "type": "array",
              "items": {
                "id": "FormOutcomeRepresentation",
                "title": "FormOutcomeRepresentation",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "string"
                  },
                  "name": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "processDefinitionId": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionName": {
              "type": "string",
              "format": "string"
            },
            "selectedOutcome": {
              "type": "string",
              "format": "string"
            },
            "style": {
              "type": "string",
              "format": "string"
            },
            "tabs": {
              "type": "array",
              "items": {
                "id": "FormTabRepresentation",
                "title": "FormTabRepresentation",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "string"
                  },
                  "title": {
                    "type": "string",
                    "format": "string"
                  },
                  "visibilityCondition": {
                    "id": "ConditionRepresentation",
                    "title": "ConditionRepresentation",
                    "type": "object",
                    "properties": {
                      "leftFormFieldId": {
                        "type": "string",
                        "format": "string"
                      },
                      "leftRestResponseId": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "taskDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "taskId": {
              "type": "string",
              "format": "string"
            },
            "taskName": {
              "type": "string",
              "format": "string"
            },
            "variables": {
              "type": "array",
              "items": {
                "id": "FormVariableRepresentation",
                "title": "FormVariableRepresentation",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdated": {
          "type": "string",
          "format": "string"
        },
        "lastUpdatedBy": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByFullName": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "referenceId": {
          "type": "integer",
          "format": "int64"
        },
        "stencilSetId": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- FormSaveRepresentation: |
    {
      "id": "FormSaveRepresentation",
      "title": "FormSaveRepresentation",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "format": "string"
        },
        "formImageBase64": {
          "type": "string",
          "format": "string"
        },
        "formRepresentation": {
          "id": "FormRepresentation",
          "title": "FormRepresentation",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "format": "string"
            },
            "formDefinition": {
              "id": "FormDefinitionRepresentation",
              "title": "FormDefinitionRepresentation",
              "type": "object",
              "properties": {
                "className": {
                  "type": "string",
                  "format": "string"
                },
                "customFieldTemplates": {
                  "type": "string",
                  "format": "string"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "id": "FormFieldRepresentation",
                    "title": "FormFieldRepresentation",
                    "type": "object",
                    "properties": {
                      "className": {
                        "type": "string",
                        "format": "string"
                      },
                      "col": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "colspan": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "dateDisplayFormat": {
                        "type": "string",
                        "format": "string"
                      },
                      "hasEmptyValue": {
                        "type": "boolean"
                      },
                      "id": {
                        "type": "string",
                        "format": "string"
                      },
                      "layout": {
                        "id": "LayoutRepresentation",
                        "title": "LayoutRepresentation",
                        "type": "object",
                        "properties": {
                          "colspan": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "column": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "row": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "maxLength": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "maxValue": {
                        "type": "string",
                        "format": "string"
                      },
                      "minLength": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "minValue": {
                        "type": "string",
                        "format": "string"
                      },
                      "name": {
                        "type": "string",
                        "format": "string"
                      },
                      "optionType": {
                        "type": "string",
                        "format": "string"
                      },
                      "options": {
                        "type": "array",
                        "items": {
                          "id": "OptionRepresentation",
                          "title": "OptionRepresentation",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "string"
                            },
                            "name": {
                              "type": "string",
                              "format": "string"
                            }
                          }
                        }
                      },
                      "overrideId": {
                        "type": "boolean"
                      },
                      "params": {
                        "type": "object"
                      },
                      "placeholder": {
                        "type": "string",
                        "format": "string"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "regexPattern": {
                        "type": "string",
                        "format": "string"
                      },
                      "required": {
                        "type": "boolean"
                      },
                      "restIdProperty": {
                        "type": "string",
                        "format": "string"
                      },
                      "restLabelProperty": {
                        "type": "string",
                        "format": "string"
                      },
                      "restResponsePath": {
                        "type": "string",
                        "format": "string"
                      },
                      "restUrl": {
                        "type": "string",
                        "format": "string"
                      },
                      "row": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "sizeX": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "sizeY": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "tab": {
                        "type": "string",
                        "format": "string"
                      },
                      "type": {
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "type": "object"
                      },
                      "visibilityCondition": {
                        "id": "ConditionRepresentation",
                        "title": "ConditionRepresentation",
                        "type": "object",
                        "properties": {
                          "leftFormFieldId": {
                            "type": "string",
                            "format": "string"
                          },
                          "leftRestResponseId": {
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "globalDateFormat": {
                  "type": "string",
                  "format": "string"
                },
                "gridsterForm": {
                  "type": "boolean"
                },
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "javascriptEvents": {
                  "type": "array",
                  "items": {
                    "id": "FormJavascriptEventRepresentation",
                    "title": "FormJavascriptEventRepresentation",
                    "type": "object",
                    "properties": {
                      "event": {
                        "type": "string",
                        "format": "string"
                      },
                      "javascriptLogic": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "string",
                  "format": "string"
                },
                "name": {
                  "type": "string",
                  "format": "string"
                },
                "outcomeTarget": {
                  "type": "string",
                  "format": "string"
                },
                "outcomes": {
                  "type": "array",
                  "items": {
                    "id": "FormOutcomeRepresentation",
                    "title": "FormOutcomeRepresentation",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "string"
                      },
                      "name": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                },
                "processDefinitionId": {
                  "type": "string",
                  "format": "string"
                },
                "processDefinitionKey": {
                  "type": "string",
                  "format": "string"
                },
                "processDefinitionName": {
                  "type": "string",
                  "format": "string"
                },
                "selectedOutcome": {
                  "type": "string",
                  "format": "string"
                },
                "style": {
                  "type": "string",
                  "format": "string"
                },
                "tabs": {
                  "type": "array",
                  "items": {
                    "id": "FormTabRepresentation",
                    "title": "FormTabRepresentation",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "string"
                      },
                      "title": {
                        "type": "string",
                        "format": "string"
                      },
                      "visibilityCondition": {
                        "id": "ConditionRepresentation",
                        "title": "ConditionRepresentation",
                        "type": "object",
                        "properties": {
                          "leftFormFieldId": {
                            "type": "string",
                            "format": "string"
                          },
                          "leftRestResponseId": {
                            "type": "string",
                            "format": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "taskDefinitionKey": {
                  "type": "string",
                  "format": "string"
                },
                "taskId": {
                  "type": "string",
                  "format": "string"
                },
                "taskName": {
                  "type": "string",
                  "format": "string"
                },
                "variables": {
                  "type": "array",
                  "items": {
                    "id": "FormVariableRepresentation",
                    "title": "FormVariableRepresentation",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "format": "string"
                      },
                      "type": {
                        "type": "string",
                        "format": "string"
                      },
                      "value": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastUpdated": {
              "type": "string",
              "format": "string"
            },
            "lastUpdatedBy": {
              "type": "integer",
              "format": "int64"
            },
            "lastUpdatedByFullName": {
              "type": "string",
              "format": "string"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "referenceId": {
              "type": "integer",
              "format": "int64"
            },
            "stencilSetId": {
              "type": "integer",
              "format": "int64"
            },
            "version": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "newVersion": {
          "type": "boolean"
        },
        "processScopeIdentifiers": {
          "type": "array",
          "items": {
            "id": "ProcessScopeIdentifierRepresentation",
            "title": "ProcessScopeIdentifierRepresentation",
            "type": "object",
            "properties": {
              "processActivityId": {
                "type": "string",
                "format": "string"
              },
              "processModelId": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "reusable": {
          "type": "boolean"
        }
      }
    }
- ValidationErrorRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "ValidationErrorRepresentation",
        "title": "ValidationErrorRepresentation",
        "type": "object",
        "properties": {
          "defaultDescription": {
            "type": "string",
            "format": "string"
          },
          "id": {
            "type": "string",
            "format": "string"
          },
          "name": {
            "type": "string",
            "format": "string"
          },
          "problem": {
            "type": "string",
            "format": "string"
          },
          "problemReference": {
            "type": "string",
            "format": "string"
          },
          "validatorSetName": {
            "type": "string",
            "format": "string"
          },
          "warning": {
            "type": "boolean"
          }
        }
      }
    }
- EndpointConfigurationRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "EndpointConfigurationRepresentation",
        "title": "EndpointConfigurationRepresentation",
        "type": "object",
        "properties": {
          "basicAuthId": {
            "type": "integer",
            "format": "int64"
          },
          "basicAuthName": {
            "type": "string",
            "format": "string"
          },
          "host": {
            "type": "string",
            "format": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "format": "string"
          },
          "path": {
            "type": "string",
            "format": "string"
          },
          "port": {
            "type": "string",
            "format": "string"
          },
          "protocol": {
            "type": "string",
            "format": "string"
          },
          "requestHeaders": {
            "type": "array",
            "items": {
              "id": "EndpointRequestHeaderRepresentation",
              "title": "EndpointRequestHeaderRepresentation",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "format": "string"
                },
                "value": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "tenantId": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    }
- EndpointConfigurationRepresentation: |
    {
      "id": "EndpointConfigurationRepresentation",
      "title": "EndpointConfigurationRepresentation",
      "type": "object",
      "properties": {
        "basicAuthId": {
          "type": "integer",
          "format": "int64"
        },
        "basicAuthName": {
          "type": "string",
          "format": "string"
        },
        "host": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "path": {
          "type": "string",
          "format": "string"
        },
        "port": {
          "type": "string",
          "format": "string"
        },
        "protocol": {
          "type": "string",
          "format": "string"
        },
        "requestHeaders": {
          "type": "array",
          "items": {
            "id": "EndpointRequestHeaderRepresentation",
            "title": "EndpointRequestHeaderRepresentation",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
- AppDeploymentRepresentation: |
    {
      "id": "AppDeploymentRepresentation",
      "title": "AppDeploymentRepresentation",
      "type": "object",
      "properties": {
        "appDefinition": {
          "id": "AppDefinitionRepresentation",
          "title": "AppDefinitionRepresentation",
          "type": "object",
          "properties": {
            "defaultAppId": {
              "type": "string",
              "format": "string"
            },
            "deploymentId": {
              "type": "string",
              "format": "string"
            },
            "description": {
              "type": "string",
              "format": "string"
            },
            "icon": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "modelId": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "tenantId": {
              "type": "integer",
              "format": "int64"
            },
            "theme": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "created": {
          "type": "string",
          "format": "string"
        },
        "createdBy": {
          "id": "LightUserRepresentation",
          "title": "LightUserRepresentation",
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "format": "string"
            },
            "email": {
              "type": "string",
              "format": "string"
            },
            "externalId": {
              "type": "string",
              "format": "string"
            },
            "firstName": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastName": {
              "type": "string",
              "format": "string"
            },
            "pictureId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "deploymentId": {
          "type": "string",
          "format": "string"
        },
        "dmnDeploymentId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
- ModelRepresentation: |
    {
      "id": "ModelRepresentation",
      "title": "ModelRepresentation",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "format": "string"
        },
        "createdBy": {
          "type": "integer",
          "format": "int64"
        },
        "createdByFullName": {
          "type": "string",
          "format": "string"
        },
        "description": {
          "type": "string",
          "format": "string"
        },
        "favorite": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdated": {
          "type": "string",
          "format": "string"
        },
        "lastUpdatedBy": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByFullName": {
          "type": "string",
          "format": "string"
        },
        "latestVersion": {
          "type": "boolean"
        },
        "modelType": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "permission": {
          "type": "string",
          "format": "string"
        },
        "referenceId": {
          "type": "integer",
          "format": "int64"
        },
        "stencilSet": {
          "type": "integer",
          "format": "int64"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- EndpointBasicAuthRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "EndpointBasicAuthRepresentation",
        "title": "EndpointBasicAuthRepresentation",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "string"
          },
          "name": {
            "type": "string",
            "format": "string"
          },
          "tenantId": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- CreateEndpointBasicAuthRepresentation: |
    {
      "id": "CreateEndpointBasicAuthRepresentation",
      "title": "CreateEndpointBasicAuthRepresentation",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "string"
        },
        "password": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string",
          "format": "string"
        }
      }
    }
- EndpointBasicAuthRepresentation: |
    {
      "id": "EndpointBasicAuthRepresentation",
      "title": "EndpointBasicAuthRepresentation",
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdated": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string",
          "format": "string"
        }
      }
    }
- LightTenantRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "LightTenantRepresentation",
        "title": "LightTenantRepresentation",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- CreateTenantRepresentation: |
    {
      "id": "CreateTenantRepresentation",
      "title": "CreateTenantRepresentation",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "configuration": {
          "type": "string",
          "format": "string"
        },
        "domain": {
          "type": "string",
          "format": "string"
        },
        "maxUsers": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "format": "string"
        }
      }
    }
- LightTenantRepresentation: |
    {
      "id": "LightTenantRepresentation",
      "title": "LightTenantRepresentation",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        }
      }
    }
- TenantRepresentation: |
    {
      "id": "TenantRepresentation",
      "title": "TenantRepresentation",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "created": {
          "type": "string",
          "format": "string"
        },
        "domain": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdate": {
          "type": "string",
          "format": "string"
        },
        "logoId": {
          "type": "integer",
          "format": "int64"
        },
        "maxUsers": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "format": "string"
        }
      }
    }
- TenantEvent-array: |
    {
      "type": "array",
      "items": {
        "id": "TenantEvent",
        "title": "TenantEvent",
        "type": "object",
        "properties": {
          "eventTime": {
            "type": "string",
            "format": "string"
          },
          "eventType": {
            "type": "string",
            "format": "string"
          },
          "extraInfo": {
            "type": "string",
            "format": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "tenantId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "userName": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- RestVariable-array: |
    {
      "type": "array",
      "items": {
        "id": "RestVariable",
        "title": "RestVariable",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          },
          "scope": {
            "type": "string",
            "format": "string"
          },
          "type": {
            "type": "string",
            "format": "string"
          },
          "value": {
            "type": "object"
          }
        }
      }
    }
- RelatedContentRepresentation: |
    {
      "id": "RelatedContentRepresentation",
      "title": "RelatedContentRepresentation",
      "type": "object",
      "properties": {
        "contentAvailable": {
          "type": "boolean"
        },
        "created": {
          "type": "string",
          "format": "string"
        },
        "createdBy": {
          "id": "LightUserRepresentation",
          "title": "LightUserRepresentation",
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "format": "string"
            },
            "email": {
              "type": "string",
              "format": "string"
            },
            "externalId": {
              "type": "string",
              "format": "string"
            },
            "firstName": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastName": {
              "type": "string",
              "format": "string"
            },
            "pictureId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "link": {
          "type": "boolean"
        },
        "linkUrl": {
          "type": "string",
          "format": "string"
        },
        "mimeType": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "previewStatus": {
          "type": "string",
          "format": "string"
        },
        "relatedContent": {
          "type": "boolean"
        },
        "simpleType": {
          "type": "string",
          "format": "string"
        },
        "source": {
          "type": "string",
          "format": "string"
        },
        "sourceId": {
          "type": "string",
          "format": "string"
        },
        "thumbnailStatus": {
          "type": "string",
          "format": "string"
        }
      }
    }
- IdentityLinkRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "IdentityLinkRepresentation",
        "title": "IdentityLinkRepresentation",
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "format": "string"
          },
          "type": {
            "type": "string",
            "format": "string"
          },
          "user": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- IdentityLinkRepresentation: |
    {
      "id": "IdentityLinkRepresentation",
      "title": "IdentityLinkRepresentation",
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "format": "string"
        },
        "type": {
          "type": "string",
          "format": "string"
        },
        "user": {
          "type": "string",
          "format": "string"
        }
      }
    }
- SubmittedFormRepresentation: |
    {
      "id": "SubmittedFormRepresentation",
      "title": "SubmittedFormRepresentation",
      "type": "object",
      "properties": {
        "form": {
          "id": "FormDefinitionRepresentation",
          "title": "FormDefinitionRepresentation",
          "type": "object",
          "properties": {
            "className": {
              "type": "string",
              "format": "string"
            },
            "customFieldTemplates": {
              "type": "string",
              "format": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "id": "FormFieldRepresentation",
                "title": "FormFieldRepresentation",
                "type": "object",
                "properties": {
                  "className": {
                    "type": "string",
                    "format": "string"
                  },
                  "col": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "colspan": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "dateDisplayFormat": {
                    "type": "string",
                    "format": "string"
                  },
                  "hasEmptyValue": {
                    "type": "boolean"
                  },
                  "id": {
                    "type": "string",
                    "format": "string"
                  },
                  "layout": {
                    "id": "LayoutRepresentation",
                    "title": "LayoutRepresentation",
                    "type": "object",
                    "properties": {
                      "colspan": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "column": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "row": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "maxLength": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "maxValue": {
                    "type": "string",
                    "format": "string"
                  },
                  "minLength": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "minValue": {
                    "type": "string",
                    "format": "string"
                  },
                  "name": {
                    "type": "string",
                    "format": "string"
                  },
                  "optionType": {
                    "type": "string",
                    "format": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "id": "OptionRepresentation",
                      "title": "OptionRepresentation",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "string"
                        },
                        "name": {
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "overrideId": {
                    "type": "boolean"
                  },
                  "params": {
                    "type": "object"
                  },
                  "placeholder": {
                    "type": "string",
                    "format": "string"
                  },
                  "readOnly": {
                    "type": "boolean"
                  },
                  "regexPattern": {
                    "type": "string",
                    "format": "string"
                  },
                  "required": {
                    "type": "boolean"
                  },
                  "restIdProperty": {
                    "type": "string",
                    "format": "string"
                  },
                  "restLabelProperty": {
                    "type": "string",
                    "format": "string"
                  },
                  "restResponsePath": {
                    "type": "string",
                    "format": "string"
                  },
                  "restUrl": {
                    "type": "string",
                    "format": "string"
                  },
                  "row": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "sizeX": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "sizeY": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "tab": {
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "type": "object"
                  },
                  "visibilityCondition": {
                    "id": "ConditionRepresentation",
                    "title": "ConditionRepresentation",
                    "type": "object",
                    "properties": {
                      "leftFormFieldId": {
                        "type": "string",
                        "format": "string"
                      },
                      "leftRestResponseId": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "globalDateFormat": {
              "type": "string",
              "format": "string"
            },
            "gridsterForm": {
              "type": "boolean"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "javascriptEvents": {
              "type": "array",
              "items": {
                "id": "FormJavascriptEventRepresentation",
                "title": "FormJavascriptEventRepresentation",
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "format": "string"
                  },
                  "javascriptLogic": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "metadata": {
              "type": "string",
              "format": "string"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "outcomeTarget": {
              "type": "string",
              "format": "string"
            },
            "outcomes": {
              "type": "array",
              "items": {
                "id": "FormOutcomeRepresentation",
                "title": "FormOutcomeRepresentation",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "string"
                  },
                  "name": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "processDefinitionId": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionName": {
              "type": "string",
              "format": "string"
            },
            "selectedOutcome": {
              "type": "string",
              "format": "string"
            },
            "style": {
              "type": "string",
              "format": "string"
            },
            "tabs": {
              "type": "array",
              "items": {
                "id": "FormTabRepresentation",
                "title": "FormTabRepresentation",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "string"
                  },
                  "title": {
                    "type": "string",
                    "format": "string"
                  },
                  "visibilityCondition": {
                    "id": "ConditionRepresentation",
                    "title": "ConditionRepresentation",
                    "type": "object",
                    "properties": {
                      "leftFormFieldId": {
                        "type": "string",
                        "format": "string"
                      },
                      "leftRestResponseId": {
                        "type": "string",
                        "format": "string"
                      }
                    }
                  }
                }
              }
            },
            "taskDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "taskId": {
              "type": "string",
              "format": "string"
            },
            "taskName": {
              "type": "string",
              "format": "string"
            },
            "variables": {
              "type": "array",
              "items": {
                "id": "FormVariableRepresentation",
                "title": "FormVariableRepresentation",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "format": "string"
                  },
                  "type": {
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "formId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "processId": {
          "type": "string",
          "format": "string"
        },
        "submitted": {
          "type": "string",
          "format": "string"
        },
        "submittedBy": {
          "id": "LightUserRepresentation",
          "title": "LightUserRepresentation",
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "format": "string"
            },
            "email": {
              "type": "string",
              "format": "string"
            },
            "externalId": {
              "type": "string",
              "format": "string"
            },
            "firstName": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastName": {
              "type": "string",
              "format": "string"
            },
            "pictureId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "taskId": {
          "type": "string",
          "format": "string"
        }
      }
    }
- UserFilterOrderRepresentation: |
    {
      "id": "UserFilterOrderRepresentation",
      "title": "UserFilterOrderRepresentation",
      "type": "object",
      "properties": {
        "appId": {
          "type": "integer",
          "format": "int64"
        },
        "order": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    }
- UserProcessInstanceFilterRepresentation: |
    {
      "id": "UserProcessInstanceFilterRepresentation",
      "title": "UserProcessInstanceFilterRepresentation",
      "type": "object",
      "properties": {
        "appId": {
          "type": "integer",
          "format": "int64"
        },
        "filter": {
          "id": "ProcessInstanceFilterRepresentation",
          "title": "ProcessInstanceFilterRepresentation",
          "type": "object",
          "properties": {
            "asc": {
              "type": "boolean"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionId": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "sort": {
              "type": "string",
              "format": "string"
            },
            "state": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "icon": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "recent": {
          "type": "boolean"
        }
      }
    }
- UserTaskFilterRepresentation: |
    {
      "id": "UserTaskFilterRepresentation",
      "title": "UserTaskFilterRepresentation",
      "type": "object",
      "properties": {
        "appId": {
          "type": "integer",
          "format": "int64"
        },
        "filter": {
          "id": "TaskFilterRepresentation",
          "title": "TaskFilterRepresentation",
          "type": "object",
          "properties": {
            "asc": {
              "type": "boolean"
            },
            "assignment": {
              "type": "string",
              "format": "string"
            },
            "dueAfter": {
              "type": "string",
              "format": "string"
            },
            "dueBefore": {
              "type": "string",
              "format": "string"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionId": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "sort": {
              "type": "string",
              "format": "string"
            },
            "state": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "icon": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "recent": {
          "type": "boolean"
        }
      }
    }
- SystemPropertiesRepresentation: |
    {
      "id": "SystemPropertiesRepresentation",
      "title": "SystemPropertiesRepresentation",
      "type": "object",
      "properties": {
        "allowInvolveByEmail": {
          "type": "boolean"
        },
        "disableJavaScriptEventsInFormEditor": {
          "type": "boolean"
        }
      }
    }
- GlobalDateFormatRepresentation: |
    {
      "id": "GlobalDateFormatRepresentation",
      "title": "GlobalDateFormatRepresentation",
      "type": "object",
      "properties": {
        "globalDateFormat": {
          "type": "string",
          "format": "string"
        }
      }
    }
- PasswordValidationConstraints: |
    {
      "id": "PasswordValidationConstraints",
      "title": "PasswordValidationConstraints",
      "type": "object",
      "properties": {
        "minLength": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- ProcessScopesRequestRepresentation: |
    {
      "id": "ProcessScopesRequestRepresentation",
      "title": "ProcessScopesRequestRepresentation",
      "type": "object",
      "properties": {
        "identifiers": {
          "type": "array",
          "items": {
            "id": "ProcessScopeIdentifierRepresentation",
            "title": "ProcessScopeIdentifierRepresentation",
            "type": "object",
            "properties": {
              "processActivityId": {
                "type": "string",
                "format": "string"
              },
              "processModelId": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "overriddenModel": {
          "type": "string",
          "format": "string"
        }
      }
    }
- ProcessScopeRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "ProcessScopeRepresentation",
        "title": "ProcessScopeRepresentation",
        "type": "object",
        "properties": {
          "activityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "activityIdsByCollapsedSubProcessIdMap": {
            "type": "object"
          },
          "activityIdsByDecisionTableIdMap": {
            "type": "object"
          },
          "activityIdsByFormIdMap": {
            "type": "object"
          },
          "activityIdsWithExcludedSubProcess": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "customStencilVariables": {
            "type": "object"
          },
          "entityVariables": {
            "type": "object"
          },
          "executionVariables": {
            "type": "object"
          },
          "fieldToVariableMappings": {
            "type": "object"
          },
          "forms": {
            "type": "object"
          },
          "metadataVariables": {
            "type": "object"
          },
          "modelId": {
            "type": "integer",
            "format": "int64"
          },
          "processModelType": {
            "type": "integer",
            "format": "int32"
          },
          "responseVariables": {
            "type": "object"
          },
          "reusableFieldMapping": {
            "type": "object"
          }
        }
      }
    }
- ArrayNode: |
    {
      "id": "ArrayNode",
      "title": "ArrayNode",
      "type": "object",
      "properties": {
        "array": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "null": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        }
      }
    }
- RuntimeDecisionTableRepresentation: |
    {
      "id": "RuntimeDecisionTableRepresentation",
      "title": "RuntimeDecisionTableRepresentation",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "format": "string"
        },
        "deploymentId": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "key": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "resourceName": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "string",
          "format": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- JsonNode: |
    {
      "id": "JsonNode",
      "title": "JsonNode",
      "type": "object",
      "properties": {
        "array": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "null": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        }
      }
    }
- ResetPasswordRepresentation: |
    {
      "id": "ResetPasswordRepresentation",
      "title": "ResetPasswordRepresentation",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "string"
        }
      }
    }
- UserActionRepresentation: |
    {
      "id": "UserActionRepresentation",
      "title": "UserActionRepresentation",
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "format": "string"
        },
        "newPassword": {
          "type": "string",
          "format": "string"
        },
        "oldPassword": {
          "type": "string",
          "format": "string"
        }
      }
    }
- RuntimeFormRepresentation: |
    {
      "id": "RuntimeFormRepresentation",
      "title": "RuntimeFormRepresentation",
      "type": "object",
      "properties": {
        "appDefinitionId": {
          "type": "integer",
          "format": "int64"
        },
        "appDeploymentId": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "modelId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
- FormDefinitionRepresentation: |
    {
      "id": "FormDefinitionRepresentation",
      "title": "FormDefinitionRepresentation",
      "type": "object",
      "properties": {
        "className": {
          "type": "string",
          "format": "string"
        },
        "customFieldTemplates": {
          "type": "string",
          "format": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "id": "FormFieldRepresentation",
            "title": "FormFieldRepresentation",
            "type": "object",
            "properties": {
              "className": {
                "type": "string",
                "format": "string"
              },
              "col": {
                "type": "integer",
                "format": "int32"
              },
              "colspan": {
                "type": "integer",
                "format": "int32"
              },
              "dateDisplayFormat": {
                "type": "string",
                "format": "string"
              },
              "hasEmptyValue": {
                "type": "boolean"
              },
              "id": {
                "type": "string",
                "format": "string"
              },
              "layout": {
                "id": "LayoutRepresentation",
                "title": "LayoutRepresentation",
                "type": "object",
                "properties": {
                  "colspan": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "column": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "row": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "maxLength": {
                "type": "integer",
                "format": "int32"
              },
              "maxValue": {
                "type": "string",
                "format": "string"
              },
              "minLength": {
                "type": "integer",
                "format": "int32"
              },
              "minValue": {
                "type": "string",
                "format": "string"
              },
              "name": {
                "type": "string",
                "format": "string"
              },
              "optionType": {
                "type": "string",
                "format": "string"
              },
              "options": {
                "type": "array",
                "items": {
                  "id": "OptionRepresentation",
                  "title": "OptionRepresentation",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "string"
                    },
                    "name": {
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "overrideId": {
                "type": "boolean"
              },
              "params": {
                "type": "object"
              },
              "placeholder": {
                "type": "string",
                "format": "string"
              },
              "readOnly": {
                "type": "boolean"
              },
              "regexPattern": {
                "type": "string",
                "format": "string"
              },
              "required": {
                "type": "boolean"
              },
              "restIdProperty": {
                "type": "string",
                "format": "string"
              },
              "restLabelProperty": {
                "type": "string",
                "format": "string"
              },
              "restResponsePath": {
                "type": "string",
                "format": "string"
              },
              "restUrl": {
                "type": "string",
                "format": "string"
              },
              "row": {
                "type": "integer",
                "format": "int32"
              },
              "sizeX": {
                "type": "integer",
                "format": "int32"
              },
              "sizeY": {
                "type": "integer",
                "format": "int32"
              },
              "tab": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              },
              "visibilityCondition": {
                "id": "ConditionRepresentation",
                "title": "ConditionRepresentation",
                "type": "object",
                "properties": {
                  "leftFormFieldId": {
                    "type": "string",
                    "format": "string"
                  },
                  "leftRestResponseId": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "globalDateFormat": {
          "type": "string",
          "format": "string"
        },
        "gridsterForm": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "javascriptEvents": {
          "type": "array",
          "items": {
            "id": "FormJavascriptEventRepresentation",
            "title": "FormJavascriptEventRepresentation",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "format": "string"
              },
              "javascriptLogic": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "metadata": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "outcomeTarget": {
          "type": "string",
          "format": "string"
        },
        "outcomes": {
          "type": "array",
          "items": {
            "id": "FormOutcomeRepresentation",
            "title": "FormOutcomeRepresentation",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "string"
              },
              "name": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionName": {
          "type": "string",
          "format": "string"
        },
        "selectedOutcome": {
          "type": "string",
          "format": "string"
        },
        "style": {
          "type": "string",
          "format": "string"
        },
        "tabs": {
          "type": "array",
          "items": {
            "id": "FormTabRepresentation",
            "title": "FormTabRepresentation",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "string"
              },
              "title": {
                "type": "string",
                "format": "string"
              },
              "visibilityCondition": {
                "id": "ConditionRepresentation",
                "title": "ConditionRepresentation",
                "type": "object",
                "properties": {
                  "leftFormFieldId": {
                    "type": "string",
                    "format": "string"
                  },
                  "leftRestResponseId": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "taskDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "taskId": {
          "type": "string",
          "format": "string"
        },
        "taskName": {
          "type": "string",
          "format": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "id": "FormVariableRepresentation",
            "title": "FormVariableRepresentation",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        }
      }
    }
- ProcessInstanceRepresentation: |
    {
      "id": "ProcessInstanceRepresentation",
      "title": "ProcessInstanceRepresentation",
      "type": "object",
      "properties": {
        "businessKey": {
          "type": "string",
          "format": "string"
        },
        "ended": {
          "type": "string",
          "format": "string"
        },
        "graphicalNotationDefined": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionCategory": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionDeploymentId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionDescription": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionName": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionVersion": {
          "type": "integer",
          "format": "int32"
        },
        "startFormDefined": {
          "type": "boolean"
        },
        "started": {
          "type": "string",
          "format": "string"
        },
        "startedBy": {
          "id": "LightUserRepresentation",
          "title": "LightUserRepresentation",
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "format": "string"
            },
            "email": {
              "type": "string",
              "format": "string"
            },
            "externalId": {
              "type": "string",
              "format": "string"
            },
            "firstName": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastName": {
              "type": "string",
              "format": "string"
            },
            "pictureId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "suspended": {
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "format": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "id": "RestVariable",
            "title": "RestVariable",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "scope": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        }
      }
    }
- ProcessInstanceAuditInfoRepresentation: |
    {
      "id": "ProcessInstanceAuditInfoRepresentation",
      "title": "ProcessInstanceAuditInfoRepresentation",
      "type": "object",
      "properties": {
        "decisionInfo": {
          "id": "AuditDecisionInfoRepresentation",
          "title": "AuditDecisionInfoRepresentation",
          "type": "object",
          "properties": {
            "appliedRules": {
              "type": "array",
              "items": {
                "id": "AuditDecisionRuleInfoRepresentation",
                "title": "AuditDecisionRuleInfoRepresentation",
                "type": "object",
                "properties": {
                  "expressions": {
                    "type": "array",
                    "items": {
                      "id": "AuditDecisionExpressionInfoRepresentation",
                      "title": "AuditDecisionExpressionInfoRepresentation",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "format": "string"
                        },
                        "value": {
                          "type": "object"
                        },
                        "variable": {
                          "type": "string",
                          "format": "string"
                        }
                      }
                    }
                  },
                  "title": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            },
            "calculatedValues": {
              "type": "array",
              "items": {
                "id": "AuditCalculatedValueRepresentation",
                "title": "AuditCalculatedValueRepresentation",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "format": "string"
                  },
                  "value": {
                    "type": "string",
                    "format": "string"
                  }
                }
              }
            }
          }
        },
        "entries": {
          "type": "array",
          "items": {
            "id": "AuditLogEntryRepresentation",
            "title": "AuditLogEntryRepresentation",
            "type": "object",
            "properties": {
              "activityId": {
                "type": "string",
                "format": "string"
              },
              "activityName": {
                "type": "string",
                "format": "string"
              },
              "activityType": {
                "type": "string",
                "format": "string"
              },
              "formData": {
                "type": "array",
                "items": {
                  "id": "AuditLogFormDataRepresentation",
                  "title": "AuditLogFormDataRepresentation",
                  "type": "object",
                  "properties": {
                    "fieldId": {
                      "type": "string",
                      "format": "string"
                    },
                    "fieldName": {
                      "type": "string",
                      "format": "string"
                    },
                    "value": {
                      "type": "string",
                      "format": "string"
                    }
                  }
                }
              },
              "index": {
                "type": "integer",
                "format": "int32"
              },
              "selectedOutcome": {
                "type": "string",
                "format": "string"
              },
              "taskAssignee": {
                "type": "string",
                "format": "string"
              },
              "taskName": {
                "type": "string",
                "format": "string"
              },
              "timestamp": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "processDefinitionName": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionVersion": {
          "type": "string",
          "format": "string"
        },
        "processInstanceEndTime": {
          "type": "string",
          "format": "string"
        },
        "processInstanceId": {
          "type": "string",
          "format": "string"
        },
        "processInstanceInitiator": {
          "type": "string",
          "format": "string"
        },
        "processInstanceName": {
          "type": "string",
          "format": "string"
        },
        "processInstanceStartTime": {
          "type": "string",
          "format": "string"
        }
      }
    }
- CommentRepresentation: |
    {
      "id": "CommentRepresentation",
      "title": "CommentRepresentation",
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "string"
        },
        "createdBy": {
          "id": "LightUserRepresentation",
          "title": "LightUserRepresentation",
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "format": "string"
            },
            "email": {
              "type": "string",
              "format": "string"
            },
            "externalId": {
              "type": "string",
              "format": "string"
            },
            "firstName": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastName": {
              "type": "string",
              "format": "string"
            },
            "pictureId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string",
          "format": "string"
        }
      }
    }
- ProcessInstanceVariableRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "ProcessInstanceVariableRepresentation",
        "title": "ProcessInstanceVariableRepresentation",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "string"
          },
          "type": {
            "type": "string",
            "format": "string"
          },
          "value": {
            "type": "object"
          }
        }
      }
    }
- HistoricProcessInstanceQueryRepresentation: |
    {
      "id": "HistoricProcessInstanceQueryRepresentation",
      "title": "HistoricProcessInstanceQueryRepresentation",
      "type": "object",
      "properties": {
        "excludeSubprocesses": {
          "type": "boolean"
        },
        "finished": {
          "type": "boolean"
        },
        "finishedAfter": {
          "type": "string",
          "format": "string"
        },
        "finishedBefore": {
          "type": "string",
          "format": "string"
        },
        "includeProcessVariables": {
          "type": "boolean"
        },
        "involvedUser": {
          "type": "string",
          "format": "string"
        },
        "order": {
          "type": "string",
          "format": "string"
        },
        "processBusinessKey": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "processInstanceId": {
          "type": "string",
          "format": "string"
        },
        "processInstanceIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "type": "string",
          "format": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "startedAfter": {
          "type": "string",
          "format": "string"
        },
        "startedBefore": {
          "type": "string",
          "format": "string"
        },
        "startedBy": {
          "type": "string",
          "format": "string"
        },
        "superProcessInstanceId": {
          "type": "string",
          "format": "string"
        },
        "tenantId": {
          "type": "string",
          "format": "string"
        },
        "tenantIdLike": {
          "type": "string",
          "format": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "id": "QueryVariable",
            "title": "QueryVariable",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "operation": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        },
        "withoutTenantId": {
          "type": "boolean"
        }
      }
    }
- HistoricTaskInstanceQueryRepresentation: |
    {
      "id": "HistoricTaskInstanceQueryRepresentation",
      "title": "HistoricTaskInstanceQueryRepresentation",
      "type": "object",
      "properties": {
        "dueDate": {
          "type": "string",
          "format": "string"
        },
        "dueDateAfter": {
          "type": "string",
          "format": "string"
        },
        "dueDateBefore": {
          "type": "string",
          "format": "string"
        },
        "executionId": {
          "type": "string",
          "format": "string"
        },
        "finished": {
          "type": "boolean"
        },
        "includeProcessVariables": {
          "type": "boolean"
        },
        "includeTaskLocalVariables": {
          "type": "boolean"
        },
        "order": {
          "type": "string",
          "format": "string"
        },
        "parentTaskId": {
          "type": "string",
          "format": "string"
        },
        "processBusinessKey": {
          "type": "string",
          "format": "string"
        },
        "processBusinessKeyLike": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKeyLike": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionName": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionNameLike": {
          "type": "string",
          "format": "string"
        },
        "processFinished": {
          "type": "boolean"
        },
        "processInstanceId": {
          "type": "string",
          "format": "string"
        },
        "processVariables": {
          "type": "array",
          "items": {
            "id": "QueryVariable",
            "title": "QueryVariable",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "operation": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "type": "string",
          "format": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "taskAssignee": {
          "type": "string",
          "format": "string"
        },
        "taskAssigneeLike": {
          "type": "string",
          "format": "string"
        },
        "taskCandidateGroup": {
          "type": "string",
          "format": "string"
        },
        "taskCompletedAfter": {
          "type": "string",
          "format": "string"
        },
        "taskCompletedBefore": {
          "type": "string",
          "format": "string"
        },
        "taskCompletedOn": {
          "type": "string",
          "format": "string"
        },
        "taskCreatedAfter": {
          "type": "string",
          "format": "string"
        },
        "taskCreatedBefore": {
          "type": "string",
          "format": "string"
        },
        "taskCreatedOn": {
          "type": "string",
          "format": "string"
        },
        "taskDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "taskDefinitionKeyLike": {
          "type": "string",
          "format": "string"
        },
        "taskDeleteReason": {
          "type": "string",
          "format": "string"
        },
        "taskDeleteReasonLike": {
          "type": "string",
          "format": "string"
        },
        "taskDescription": {
          "type": "string",
          "format": "string"
        },
        "taskDescriptionLike": {
          "type": "string",
          "format": "string"
        },
        "taskId": {
          "type": "string",
          "format": "string"
        },
        "taskInvolvedUser": {
          "type": "string",
          "format": "string"
        },
        "taskMaxPriority": {
          "type": "integer",
          "format": "int32"
        },
        "taskMinPriority": {
          "type": "integer",
          "format": "int32"
        },
        "taskName": {
          "type": "string",
          "format": "string"
        },
        "taskNameLike": {
          "type": "string",
          "format": "string"
        },
        "taskOwner": {
          "type": "string",
          "format": "string"
        },
        "taskOwnerLike": {
          "type": "string",
          "format": "string"
        },
        "taskPriority": {
          "type": "integer",
          "format": "int32"
        },
        "taskVariables": {
          "type": "array",
          "items": {
            "id": "QueryVariable",
            "title": "QueryVariable",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "operation": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        },
        "tenantId": {
          "type": "string",
          "format": "string"
        },
        "tenantIdLike": {
          "type": "string",
          "format": "string"
        },
        "withoutDueDate": {
          "type": "boolean"
        },
        "withoutTenantId": {
          "type": "boolean"
        }
      }
    }
- CompleteFormRepresentation: |
    {
      "id": "CompleteFormRepresentation",
      "title": "CompleteFormRepresentation",
      "type": "object",
      "properties": {
        "outcome": {
          "type": "string",
          "format": "string"
        },
        "values": {
          "type": "object"
        }
      }
    }
- FormValueRepresentation-array: |
    {
      "type": "array",
      "items": {
        "id": "FormValueRepresentation",
        "title": "FormValueRepresentation",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "string"
          },
          "name": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- SaveFormRepresentation: |
    {
      "id": "SaveFormRepresentation",
      "title": "SaveFormRepresentation",
      "type": "object",
      "properties": {
        "values": {
          "type": "object"
        }
      }
    }
- TaskRepresentation: |
    {
      "id": "TaskRepresentation",
      "title": "TaskRepresentation",
      "type": "object",
      "properties": {
        "adhocTaskCanBeReassigned": {
          "type": "boolean"
        },
        "assignee": {
          "id": "LightUserRepresentation",
          "title": "LightUserRepresentation",
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "format": "string"
            },
            "email": {
              "type": "string",
              "format": "string"
            },
            "externalId": {
              "type": "string",
              "format": "string"
            },
            "firstName": {
              "type": "string",
              "format": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "lastName": {
              "type": "string",
              "format": "string"
            },
            "pictureId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "category": {
          "type": "string",
          "format": "string"
        },
        "created": {
          "type": "string",
          "format": "string"
        },
        "description": {
          "type": "string",
          "format": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "endDate": {
          "type": "string",
          "format": "string"
        },
        "executionId": {
          "type": "string",
          "format": "string"
        },
        "formKey": {
          "type": "string",
          "format": "string"
        },
        "id": {
          "type": "string",
          "format": "string"
        },
        "initiatorCanCompleteTask": {
          "type": "boolean"
        },
        "involvedPeople": {
          "type": "array",
          "items": {
            "id": "LightUserRepresentation",
            "title": "LightUserRepresentation",
            "type": "object",
            "properties": {
              "company": {
                "type": "string",
                "format": "string"
              },
              "email": {
                "type": "string",
                "format": "string"
              },
              "externalId": {
                "type": "string",
                "format": "string"
              },
              "firstName": {
                "type": "string",
                "format": "string"
              },
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "lastName": {
                "type": "string",
                "format": "string"
              },
              "pictureId": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "managerOfCandidateGroup": {
          "type": "boolean"
        },
        "memberOfCandidateGroup": {
          "type": "boolean"
        },
        "memberOfCandidateUsers": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "parentTaskId": {
          "type": "string",
          "format": "string"
        },
        "parentTaskName": {
          "type": "string",
          "format": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "processDefinitionCategory": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionDeploymentId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionDescription": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionName": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionVersion": {
          "type": "integer",
          "format": "int32"
        },
        "processInstanceId": {
          "type": "string",
          "format": "string"
        },
        "processInstanceName": {
          "type": "string",
          "format": "string"
        },
        "processInstanceStartUserId": {
          "type": "string",
          "format": "string"
        },
        "taskDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "id": "RestVariable",
            "title": "RestVariable",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "scope": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        }
      }
    }
- TaskFilterRequestRepresentation: |
    {
      "id": "TaskFilterRequestRepresentation",
      "title": "TaskFilterRequestRepresentation",
      "type": "object",
      "properties": {
        "appDefinitionId": {
          "type": "integer",
          "format": "int64"
        },
        "filter": {
          "id": "TaskFilterRepresentation",
          "title": "TaskFilterRepresentation",
          "type": "object",
          "properties": {
            "asc": {
              "type": "boolean"
            },
            "assignment": {
              "type": "string",
              "format": "string"
            },
            "dueAfter": {
              "type": "string",
              "format": "string"
            },
            "dueBefore": {
              "type": "string",
              "format": "string"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionId": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "sort": {
              "type": "string",
              "format": "string"
            },
            "state": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "filterId": {
          "type": "integer",
          "format": "int64"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- TaskUpdateRepresentation: |
    {
      "id": "TaskUpdateRepresentation",
      "title": "TaskUpdateRepresentation",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "format": "string"
        },
        "categorySet": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "format": "string"
        },
        "descriptionSet": {
          "type": "boolean"
        },
        "dueDate": {
          "type": "string",
          "format": "string"
        },
        "dueDateSet": {
          "type": "boolean"
        },
        "formKey": {
          "type": "string",
          "format": "string"
        },
        "formKeySet": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "nameSet": {
          "type": "boolean"
        },
        "parentTaskId": {
          "type": "string",
          "format": "string"
        },
        "parentTaskIdSet": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "prioritySet": {
          "type": "boolean"
        }
      }
    }
- TaskAuditInfoRepresentation: |
    {
      "id": "TaskAuditInfoRepresentation",
      "title": "TaskAuditInfoRepresentation",
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "format": "string"
        },
        "comments": {
          "type": "array",
          "items": {
            "id": "CommentAuditInfo",
            "title": "CommentAuditInfo",
            "type": "object",
            "properties": {
              "author": {
                "type": "string",
                "format": "string"
              },
              "message": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "endTime": {
          "type": "string",
          "format": "string"
        },
        "formData": {
          "type": "array",
          "items": {
            "id": "AuditLogFormDataRepresentation",
            "title": "AuditLogFormDataRepresentation",
            "type": "object",
            "properties": {
              "fieldId": {
                "type": "string",
                "format": "string"
              },
              "fieldName": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "string",
                "format": "string"
              }
            }
          }
        },
        "processDefinitionName": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionVersion": {
          "type": "integer",
          "format": "int32"
        },
        "processInstanceId": {
          "type": "string",
          "format": "string"
        },
        "selectedOutcome": {
          "type": "string",
          "format": "string"
        },
        "startTime": {
          "type": "string",
          "format": "string"
        },
        "taskId": {
          "type": "string",
          "format": "string"
        },
        "taskName": {
          "type": "string",
          "format": "string"
        }
      }
    }
- ChecklistOrderRepresentation: |
    {
      "id": "ChecklistOrderRepresentation",
      "title": "ChecklistOrderRepresentation",
      "type": "object",
      "properties": {
        "order": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
- AppDefinitionPublishRepresentation: |
    {
      "id": "AppDefinitionPublishRepresentation",
      "title": "AppDefinitionPublishRepresentation",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "format": "string"
        },
        "force": {
          "type": "boolean"
        }
      }
    }
- BoxUserAccountCredentialsRepresentation: |
    {
      "id": "BoxUserAccountCredentialsRepresentation",
      "title": "BoxUserAccountCredentialsRepresentation",
      "type": "object",
      "properties": {
        "authenticationURL": {
          "type": "string",
          "format": "string"
        },
        "expireDate": {
          "type": "string",
          "format": "string"
        },
        "ownerEmail": {
          "type": "string",
          "format": "string"
        }
      }
    }
- UserAccountCredentialsRepresentation: |
    {
      "id": "UserAccountCredentialsRepresentation",
      "title": "UserAccountCredentialsRepresentation",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "string"
        },
        "username": {
          "type": "string",
          "format": "string"
        }
      }
    }
- CreateProcessInstanceRepresentation: |
    {
      "id": "CreateProcessInstanceRepresentation",
      "title": "CreateProcessInstanceRepresentation",
      "type": "object",
      "properties": {
        "businessKey": {
          "type": "string",
          "format": "string"
        },
        "name": {
          "type": "string",
          "format": "string"
        },
        "outcome": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionId": {
          "type": "string",
          "format": "string"
        },
        "processDefinitionKey": {
          "type": "string",
          "format": "string"
        },
        "values": {
          "type": "object"
        },
        "variables": {
          "type": "array",
          "items": {
            "id": "RestVariable",
            "title": "RestVariable",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "format": "string"
              },
              "scope": {
                "type": "string",
                "format": "string"
              },
              "type": {
                "type": "string",
                "format": "string"
              },
              "value": {
                "type": "object"
              }
            }
          }
        }
      }
    }
- ProcessInstanceFilterRequestRepresentation: |
    {
      "id": "ProcessInstanceFilterRequestRepresentation",
      "title": "ProcessInstanceFilterRequestRepresentation",
      "type": "object",
      "properties": {
        "appDefinitionId": {
          "type": "integer",
          "format": "int64"
        },
        "filter": {
          "id": "ProcessInstanceFilterRepresentation",
          "title": "ProcessInstanceFilterRepresentation",
          "type": "object",
          "properties": {
            "asc": {
              "type": "boolean"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionId": {
              "type": "string",
              "format": "string"
            },
            "processDefinitionKey": {
              "type": "string",
              "format": "string"
            },
            "sort": {
              "type": "string",
              "format": "string"
            },
            "state": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "filterId": {
          "type": "integer",
          "format": "int64"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
- RuntimeAppDefinitionSaveRepresentation: |
    {
      "id": "RuntimeAppDefinitionSaveRepresentation",
      "title": "RuntimeAppDefinitionSaveRepresentation",
      "type": "object",
      "properties": {
        "appDefinitions": {
          "type": "array",
          "items": {
            "id": "AppDefinitionRepresentation",
            "title": "AppDefinitionRepresentation",
            "type": "object",
            "properties": {
              "defaultAppId": {
                "type": "string",
                "format": "string"
              },
              "deploymentId": {
                "type": "string",
                "format": "string"
              },
              "description": {
                "type": "string",
                "format": "string"
              },
              "icon": {
                "type": "string",
                "format": "string"
              },
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "modelId": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string",
                "format": "string"
              },
              "tenantId": {
                "type": "integer",
                "format": "int64"
              },
              "theme": {
                "type": "string",
                "format": "string"
              }
            }
          }
        }
      }
    }
/enterprise:
  /groups:
    /{groupId}/users:
      uriParameters:
        groupId:
          description: groupId
          type: integer
          required: true
  #   #   displayName: groupId
      get:
  #     displayName: getUsersForGroupUsingGET
        description: List users member of a specific group
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
    get:
  #   displayName: getGroupsUsingGET
      description: List groups
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        filter:
          description: filter
          type: string
          required: false
  #   #   displayName: filter
        groupId:
          description: groupId
          type: integer
          required: false
  #   #   displayName: groupId
        externalId:
          description: externalId
          type: string
          required: false
  #   #   displayName: externalId
        externalIdCaseInsensitive:
          description: externalIdCaseInsensitive
          type: string
          required: false
  #   #   displayName: externalIdCaseInsensitive
        tenantId:
          description: tenantId
          type: integer
          required: false
  #   #   displayName: tenantId
  /profile:
    /accounts/alfresco:
      get:
  #     displayName: getRepositoriesUsingGET
        description: List Alfresco repositories
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          tenantId:
            description: tenantId
            type: integer
            required: false
    #   #   displayName: tenantId
          includeAccounts:
            description: includeAccounts
            type: boolean
            default: true
            required: false
    #   #   displayName: includeAccounts
    get:
  #   displayName: getProfileUsingGET
      description: Retrieve user information
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: UserRepresentation
    post:
      body:
        application/json:
          schema: UserRepresentation
  #   displayName: updateProfile
      description: Update user information
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: UserRepresentation
  /profile-password:
    post:
      body:
        application/json:
          schema: ChangePasswordRepresentation
  #   displayName: changePasswordUsingPOST
      description: Change user password
      responses: {}
  /profile-picture:
    get:
  #   displayName: getProfilePictureUsingGET
      description: Retrieve user profile picture
      responses:
        200:
          description: OK
          body:
            application/octet-stream:
    post:
  #   displayName: uploadProfilePictureUsingPOST
      description: Change user profile picture
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ImageUploadRepresentation
      body:
          application/x-www-form-urlencoded:
            formParameters:
                file:
                  description: file
                  type: file
                  required: true
  #   #   displayName: file
  /idm-sync-log-entries:
    /{syncLogEntryId}/logfile:
      uriParameters:
        syncLogEntryId:
          description: syncLogEntryId
          type: integer
          required: true
  #   #   displayName: syncLogEntryId
      get:
#  #     displayName: getLogFileUsingGET
        description: getLogFile
        responses: {}
    get:
  #   displayName: getSyncLogEntriesUsingGET
      description: getSyncLogEntries
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: SyncLogEntryRepresentation-array
      queryParameters:
        tenantId:
          description: tenantId
          type: integer
          required: false
  #   #   displayName: tenantId
        page:
          description: page
          type: integer
          required: false
  #   #   displayName: page
        start:
          description: start
          type: integer
          required: false
  #   #   displayName: start
        size:
          description: size
          type: integer
          required: false
  #   #   displayName: size
  /app-version:
    get:
  #   displayName: getAppVersionUsingGET
      description: Server Information
      responses:
        200:
          description: OK
  /export-app-deployment/{deploymentId}:
    uriParameters:
      deploymentId:
        description: deploymentId
        type: string
        required: true
  #     displayName: deploymentId
    get:
  #   displayName: exportAppDefinitionUsingGET_1
      description: exportAppDefinition
      responses: {}
  /runtime-app-deployment:
    get:
      description: getRuntimeAppDeploymentByDeployment
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: AppDeploymentRepresentation
      queryParameters:
        deploymentId:
          description: deploymentId
          type: string
          required: false
  #   #   displayName: deploymentId
        dmnDeploymentId:
          description: dmnDeploymentId
          type: integer
          required: false
  #   #   displayName: dmnDeploymentId
  /runtime-app-deployments:
    /{appDeploymentId}:
      uriParameters:
        appDeploymentId:
          description: appDeploymentId
          type: integer
          required: true
  #   #   displayName: appDeploymentId
      get:
  #     displayName: getAppDeploymentUsingGET
        description: getAppDeployment
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: AppDeploymentRepresentation
      delete:
  #     displayName: deleteAppDeploymentUsingDELETE
        description: deleteAppDeployment
        responses: {}
    get:
  #   displayName: getAppDefinitionsUsingGET_1
      description: getAppDefinitions
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        nameLike:
          description: nameLike
          type: string
          required: false
  #   #   displayName: nameLike
        tenantId:
          description: tenantId
          type: integer
          required: false
  #   #   displayName: tenantId
        latest:
          description: latest
          type: boolean
          required: false
  #   #   displayName: latest
        start:
          description: start
          type: integer
          required: false
  #   #   displayName: start
        sort:
          description: sort
          type: string
          required: false
  #   #   displayName: sort
        order:
          description: order
          type: string
          required: false
  #   #   displayName: order
        size:
          description: size
          type: integer
          required: false
  #   #   displayName: size
  /content:
    /raw:
      post:
  #     displayName: createTemporaryRawRelatedContentUsingPOST
        description: createTemporaryRawRelatedContent
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: RelatedContentRepresentation
        body:
          application/x-www-form-urlencoded:
            formParameters:
              file:
                description: file
                type: file
                required: true
    #   #   displayName: file
    /{contentId}:
      uriParameters:
        contentId:
          description: contentId
          type: integer
          required: true
  #   #   displayName: contentId
      /raw:
        get:
  #   #   displayName: getRawContentUsingGET_1
          description: getRawContent
          responses: {}
      /rendition/{renditionType}:
        uriParameters:
          renditionType:
            description: renditionType
            type: string
            required: true
    #   #   displayName: renditionType
        get:
  #   #   displayName: getRawContentUsingGET
          description: Retrieve Raw Content
          responses: {}
      get:
  #     displayName: getContentUsingGET
        description: getContent
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: RelatedContentRepresentation
      delete:
  #     displayName: deleteContentUsingDELETE
        description: deleteContent
        responses: {}
    post:
      body:
        application/json:
          schema: RelatedContentRepresentation
  #   displayName: createTemporaryRelatedContentUsingPOST
      description: createTemporaryRelatedContent
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: RelatedContentRepresentation
  /account/integration:
    get:
  #   displayName: getAccountsUsingGET
      description: Retrieve Alfresco account information
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
  /form-submitted-forms/{formId}:
    uriParameters:
      formId:
        description: formId
        type: integer
        required: true
  #     displayName: formId
    get:
  #   displayName: getFormSubmittedFromsUsingGET
      description: getFormSubmittedFroms
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        submittedBy:
          description: submittedBy
          type: integer
          required: false
  #   #   displayName: submittedBy
        start:
          description: start
          type: integer
          required: false
  #   #   displayName: start
        size:
          description: size
          type: integer
          required: false
  #   #   displayName: size
  /process-submitted-forms/{processId}:
    uriParameters:
      processId:
        description: processId
        type: string
        required: true
  #     displayName: processId
    get:
  #   displayName: getProcessSubmittedFromsUsingGET
      description: getProcessSubmittedFroms
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
  /submitted-forms/{submittedFormId}:
    uriParameters:
      submittedFormId:
        description: submittedFormId
        type: integer
        required: true
  #     displayName: submittedFormId
    get:
  #   displayName: getSubmittedFromUsingGET
      description: getSubmittedFrom
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: SubmittedFormRepresentation
  /task-submitted-form/{taskId}:
    uriParameters:
      taskId:
        description: taskId
        type: string
        required: true
  #     displayName: taskId
    get:
  #   displayName: getTaskSubmittedFromsUsingGET
      description: getTaskSubmittedFroms
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: SubmittedFormRepresentation
  /system/properties:
    /global-date-format/{tenantId}:
      uriParameters:
        tenantId:
          description: tenantId
          type: integer
          required: true
  #   #   displayName: tenantId
      get:
  #     displayName: getGlobalDateFormatUsingGET
        description: getGlobalDateFormat
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: GlobalDateFormatRepresentation
    /involved-users-can-edit-forms/{tenantId}:
      uriParameters:
        tenantId:
          description: tenantId
          type: integer
          required: true
  #   #   displayName: tenantId
      get:
  #     displayName: involvedUsersCanEditFormsUsingGET
        description: involvedUsersCanEditForms
        responses:
          200:
            description: OK
    /password-validation-constraints/{tenantId}:
      uriParameters:
        tenantId:
          description: tenantId
          type: integer
          required: true
  #   #   displayName: tenantId
      get:
  #     displayName: getPasswordValidationConstraintsUsingGET
        description: getPasswordValidationConstraints
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: PasswordValidationConstraints
    get:
  #   displayName: getPropertiesUsingGET
      description: Retrieve System Properties
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: SystemPropertiesRepresentation
  /forms:
    /{formId}:
      uriParameters:
        formId:
          description: formId
          type: integer
          required: true
  #   #   displayName: formId
      /editorJson:
        get:
  #   #   displayName: getFormEditorJsonUsingGET
          description: getFormEditorJson
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormDefinitionRepresentation
      get:
  #     displayName: getFormUsingGET_1
        description: getForm
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: RuntimeFormRepresentation
    get:
  #   displayName: getFormsUsingGET_2
      description: getForms
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        nameLike:
          description: nameLike
          type: string
          required: false
  #   #   displayName: nameLike
        appId:
          description: appId
          type: integer
          required: false
  #   #   displayName: appId
        tenantId:
          description: tenantId
          type: integer
          required: false
  #   #   displayName: tenantId
        start:
          description: start
          type: integer
          required: false
  #   #   displayName: start
        sort:
          description: sort
          type: string
          required: false
  #   #   displayName: sort
        order:
          description: order
          type: string
          required: false
  #   #   displayName: order
        size:
          description: size
          type: integer
          required: false
  #   #   displayName: size
  /process-scopes:
    post:
      body:
        application/json:
          schema: ProcessScopesRequestRepresentation
  #   displayName: getRuntimeProcessScopesUsingPOST
      description: getRuntimeProcessScopes
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ProcessScopeRepresentation-array
  /models:
    /{modelId}:
      uriParameters:
        modelId:
          description: modelId
          type: integer
          required: true
  #   #   displayName: modelId
      /history:
        /{modelHistoryId}:
          uriParameters:
            modelHistoryId:
              description: modelHistoryId
              type: integer
              required: true
      #   #   displayName: modelHistoryId
          get:
    #   #   displayName: getProcessModelHistoryUsingGET
            description: To get a particular older version of a model
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ModelRepresentation
        get:
  #   #   displayName: getModelHistoryCollectionUsingGET
          description: To get the version information for a model
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            includeLatestVersion:
              description: includeLatestVersion
              type: boolean
              required: false
      #   #   displayName: includeLatestVersion
      /clone:
        post:
          body:
            application/json:
              schema: ModelRepresentation
  #   #   displayName: duplicateModelUsingPOST
          description: To duplicate an existing model
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ModelRepresentation
      /newversion:
        post:
  #   #   displayName: importNewVersionUsingPOST
          description: Create a new model version
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ModelRepresentation
          body:
            application/x-www-form-urlencoded:
              formParameters:
                file:
                  description: file
                  type: file
                  required: true
      #   #   displayName: file
      /thumbnail:
        get:
  #   #   displayName: getModelThumbnailUsingGET
          description: Get Model thumbnail
          responses:
            200:
              description: OK
      /editor:
        /json:
          get:
    #   #   displayName: getModelJSONUsingGET
            description: Get the JSON model
            responses:
              200:
                description: OK
          post:
            body: {}
    #   #   displayName: saveModelUsingPOST
            description: Save the JSON model
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ModelRepresentation
        /validate:
          uriParameters:
          post:
            body: {}
    #   #   displayName: validateModelUsingPOST
            description: Validate the JSON model
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ValidationErrorRepresentation-array
      get:
  #     displayName: getModelUsingGET
        description: To retrieve details about a particular model (process, form, decision rule or app)
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ModelRepresentation
        queryParameters:
          includePermissions:
            description: includePermissions
            type: boolean
            required: false
    #   #   displayName: includePermissions
      put:
        body:
          application/json:
            schema: ModelRepresentation
  #     displayName: updateModelUsingPUT
        description: Edit a specific model
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ModelRepresentation
      delete:
  #     displayName: deleteModelUsingDELETE
        description: Delete a model
        responses: {}
        queryParameters:
          cascade:
            description: cascade
            type: boolean
            required: false
    #   #   displayName: cascade
          deleteRuntimeApp:
            description: deleteRuntimeApp
            type: boolean
            required: false
    #   #   displayName: deleteRuntimeApp
    /{processModelId}:
      /bpmn20:
        get:
  #   #   displayName: getProcessModelBpmn20XmlUsingGET
          description: Export a process definition model to a BPMN 2.0 xml file
          responses: {}
      /history/{processModelHistoryId}/bpmn20:
        uriParameters:
          processModelHistoryId:
            description: processModelHistoryId
            type: integer
            required: true
    #   #   displayName: processModelHistoryId
        get:
  #   #   displayName: getHistoricProcessModelBpmn20XmlUsingGET
          description: Export a previous process definition model to a BPMN 2.0 xml file
          responses: {}
    get:
  #   displayName: getModelsUsingGET
      description: List models (process, form, decision rule or app)
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        filter:
          description: filter
          type: string
          required: false
  #   #   displayName: filter
        sort:
          description: sort
          type: string
          required: false
  #   #   displayName: sort
        modelType:
          description: modelType
          type: integer
          required: false
  #   #   displayName: modelType
        referenceId:
          description: referenceId
          type: integer
          required: false
  #   #   displayName: referenceId
    post:
      body:
        application/json:
          schema: ModelRepresentation
  #   displayName: createModelUsingPOST
      description: To create a new model
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ModelRepresentation
  /models-for-app-definition:
    get:
  #   displayName: getModelsToIncludeInAppDefinitionUsingGET
      description: TODO
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
  /process-models/import:
    post:
  #   displayName: importProcessModelUsingPOST
      description: To import a BPMN 2.0 xml file
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ModelRepresentation

      body:
        application/x-www-form-urlencoded:
          formParameters:
            file:
              description: file
              type: file
              required: true
  #   #   displayName: file
  /idm/passwords:
    post:
      body:
        application/json:
          schema: ResetPasswordRepresentation
  #   displayName: requestPasswordResetUsingPOST
      description: 'Request password reset '
      responses: {}
  /users:
    /{userId}:
      uriParameters:
        userId:
          description: userId
          type: integer
          required: true
  #   #   displayName: userId
      /picture:
        uriParameters:
          userId:
            description: userId
            type: integer
            required: true
    #   #   displayName: userId
        get:
  #   #   displayName: getProfilePictureUsingGET_1
          description: Retrieve user profile picture
          responses: {}
      get:
  #     displayName: getUserUsingGET_1
        description: Retrieve user information
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: UserRepresentation
      put:
        body:
          application/json:
            schema: UserRepresentation
  #     displayName: updateUserUsingPUT
        description: Update user information
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: UserRepresentation
      post:
        body:
          application/json:
            schema: UserActionRepresentation
  #     displayName: executeActionUsingPOST
        description: Execute an action for a specific user
        responses: {}
    get:
  #   displayName: getUsersUsingGET_1
      description: List users
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        filter:
          description: filter
          type: string
          required: false
  #   #   displayName: filter
        email:
          description: email
          type: string
          required: false
  #   #   displayName: email
        externalId:
          description: externalId
          type: string
          required: false
  #   #   displayName: externalId
        externalIdCaseInsensitive:
          description: externalIdCaseInsensitive
          type: string
          required: false
  #   #   displayName: externalIdCaseInsensitive
        excludeTaskId:
          description: excludeTaskId
          type: string
          required: false
  #   #   displayName: excludeTaskId
        excludeProcessId:
          description: excludeProcessId
          type: string
          required: false
  #   #   displayName: excludeProcessId
        groupId:
          description: groupId
          type: integer
          required: false
  #   #   displayName: groupId
        tenantId:
          description: tenantId
          type: integer
          required: false
  #   #   displayName: tenantId
  /historic-process-instances/query:
    post:
      body:
        application/json:
          schema: HistoricProcessInstanceQueryRepresentation
  #   displayName: getHistoricProcessInstancesUsingPOST
      description: getHistoricProcessInstances
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
  /historic-tasks/query:
    post:
      body:
        application/json:
          schema: HistoricTaskInstanceQueryRepresentation
  #   displayName: listHistoricTasksUsingPOST
      description: listHistoricTasks
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
  /task-forms/{task-id}/variables:
    displayName: Get task variables
    description: Return the variables associated to the given task id
    uriParameters:
        task-id:
            displayName: task-id
            type: string
            required: false
            repeat: false
    get:
        displayName: Get task variables
  /task-forms/{taskId}:
    uriParameters:
      taskId:
        description: taskId
        type: string
        required: true
  #     displayName: taskId
    /form-values/{field}:
      uriParameters:
        taskId:
          description: taskId
          type: string
          required: true
  #   #   displayName: taskId
        field:
          description: field
          type: string
          required: true
  #   #   displayName: field
      /{column}:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
          field:
            description: field
            type: string
            required: true
    #   #   displayName: field
          column:
            description: column
            type: string
            required: true
    #   #   displayName: column
        get:
  #   #   displayName: getRestFieldValuesUsingGET_1
          description: Retrieve Column Field Values
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormValueRepresentation-array
      get:
  #     displayName: getRestFieldValuesUsingGET_2
        description: Retrieve Populated Field Values
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: FormValueRepresentation-array
    /save-form:
      uriParameters:
        taskId:
          description: taskId
          type: string
          required: true
  #   #   displayName: taskId
      post:
        body:
          application/json:
            schema: SaveFormRepresentation
  #     displayName: saveTaskFormUsingPOST
        description: Save Task Form
        responses: {}
    get:
  #   displayName: getTaskFormUsingGET
      description: Retrieve Task Form
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: FormDefinitionRepresentation
    post:
      body:
        application/json:
          schema: CompleteFormRepresentation
  #   displayName: completeTaskFormUsingPOST
      description: Complete a Task Form
      responses: {}
  /tasks:
    /filter:
      post:
        body:
          application/json:
            schema: TaskFilterRequestRepresentation
  #     displayName: filterTasksUsingPOST
        description: Filter list of Task
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
    /query:
      post:
        body: {}
  #     displayName: listTasksUsingPOST
        description: List Task
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
    /{taskId}:
      uriParameters:
        taskId:
          description: taskId
          type: string
          required: true
  #   #   displayName: taskId
      /variables:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        /{variableName}:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
            variableName:
              description: variableName
              type: string
              required: true
      #   #   displayName: variableName
          get:
    #   #   displayName: getVariableUsingGET
            description: getVariable
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: RestVariable
            queryParameters:
              scope:
                description: scope
                type: string
                required: false
        #   #   displayName: scope
          put:
            body:
              application/json:
                schema: RestVariable
    #   #   displayName: updateVariableUsingPUT
            description: updateVariable
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: RestVariable
          delete:
    #   #   displayName: deleteVariableUsingDELETE
            description: deleteVariable
            responses: {}
            queryParameters:
              scope:
                description: scope
                type: string
                required: false
        #   #   displayName: scope
        get:
  #   #   displayName: getVariablesUsingGET
          description: getVariables
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RestVariable-array
          queryParameters:
            scope:
              description: scope
              type: string
              required: false
      #   #   displayName: scope
        post:
          body:
            application/json:
              schema: RestVariable-array
  #   #   displayName: createTaskVariableUsingPOST
          description: createTaskVariable
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RestVariable-array
        delete:
  #   #   displayName: deleteAllLocalTaskVariablesUsingDELETE
          description: deleteAllLocalTaskVariables
          responses: {}
      /audit:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        get:
  #   #   displayName: getTaskAuditLogUsingGET_1
          description: getTaskAuditLog
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: TaskAuditInfoRepresentation
      /checklist:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        get:
  #   #   displayName: getChecklistUsingGET
          description: Retrieve Checklist added to a task
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
        put:
          body:
            application/json:
              schema: ChecklistOrderRepresentation
  #   #   displayName: orderChecklistUsingPUT
          description: Change the order of items on a checklist
          responses: {}
        post:
          body:
            application/json:
              schema: TaskRepresentation
  #   #   displayName: addSubtaskUsingPOST
          description: Create a task checklist
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: TaskRepresentation
      /comments:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        get:
  #   #   displayName: getTaskCommentsUsingGET
          description: Comment list added to Task
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            latestFirst:
              description: latestFirst
              type: boolean
              required: false
      #   #   displayName: latestFirst
        post:
          body:
            application/json:
              schema: CommentRepresentation
  #   #   displayName: addTaskCommentUsingPOST
          description: Add a comment to a Task
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: CommentRepresentation
      /content:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        get:
  #   #   displayName: getRelatedContentForTaskUsingGET
          description: Retrieve which content is attached to a task
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            isRelatedContent:
              description: isRelatedContent
              type: boolean
              required: false
      #   #   displayName: isRelatedContent
        post:
          body:
            application/json:
              schema: RelatedContentRepresentation
  #   #   displayName: createRelatedContentOnTaskUsingPOST
          description: To relate content (eg from Alfresco) to a task
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RelatedContentRepresentation
          queryParameters:
            isRelatedContent:
              description: isRelatedContent
              type: boolean
              required: false
      #   #   displayName: isRelatedContent
      /identitylinks:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        /{family}:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
            family:
              description: family
              type: string
              required: true
      #   #   displayName: family
          /{identityId}/{type}:
            uriParameters:
              taskId:
                description: taskId
                type: string
                required: true
        #   #   displayName: taskId
              family:
                description: family
                type: string
                required: true
        #   #   displayName: family
              identityId:
                description: identityId
                type: string
                required: true
        #   #   displayName: identityId
              type:
                description: type
                type: string
                required: true
        #   #   displayName: type
            get:
      #   #   displayName: getIdentityLinkTypeUsingGET_2
              description: getIdentityLinkType
              responses:
                200:
                  description: OK
                  body:
                    application/json:
                      schema: IdentityLinkRepresentation
            delete:
      #   #   displayName: deleteIdentityLinkUsingDELETE_2
              description: deleteIdentityLink
              responses: {}
          get:
    #   #   displayName: getIdentityLinksForFamilyUsingGET_2
            description: getIdentityLinksForFamily
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: IdentityLinkRepresentation-array
        get:
  #   #   displayName: getIdentityLinksUsingGET_2
          description: getIdentityLinks
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: IdentityLinkRepresentation-array
        post:
          body:
            application/json:
              schema: IdentityLinkRepresentation
  #   #   displayName: createIdentityLinkUsingPOST_2
          description: createIdentityLink
          responses:
            200:
              description: Created
              body:
                application/json:
                  schema: IdentityLinkRepresentation
      /raw-content:
        uriParameters:
          taskId:
            description: taskId
            type: string
            required: true
    #   #   displayName: taskId
        post:
  #   #   displayName: createRelatedContentOnTaskUsingPOST_1
          description: Upload content to a task
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RelatedContentRepresentation
          queryParameters:
            isRelatedContent:
              description: isRelatedContent
              type: boolean
              required: false
      #   #   displayName: isRelatedContent
          body:
            application/x-www-form-urlencoded:
              formParameters:
                file:
                  description: file
                  type: file
                  required: true
          #        displayName: file
      /action:
        /delegate:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
            body: {}
    #   #   displayName: delegateTaskUsingPUT
            description: delegateTask
            responses: {}
        /resolve:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
    #   #   displayName: resolveTaskUsingPUT
            description: resolveTask
            responses: {}
        /assign:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
            body: {}
    #   #   displayName: assignTaskUsingPUT
            description: Assign a task to a user
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: TaskRepresentation
        /attach-form:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
            body: {}
    #   #   displayName: attachFormUsingPUT
            description: Attach a form to a task
            responses: {}
        /claim:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
    #   #   displayName: claimTaskUsingPUT
            description: Claim a task
            responses: {}
        /complete:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
    #   #   displayName: completeTaskUsingPUT
            description: Complete Task
            responses: {}
        /involve:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
            body: {}
    #   #   displayName: involveUserUsingPUT
            description: To involve a user with a task
            responses: {}
        /remove-form:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          delete:
    #   #   displayName: removeFormUsingDELETE
            description: Remove a form to a task
            responses: {}
        /remove-involved:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
            body: {}
    #   #   displayName: removeInvolvedUserUsingPUT
            description: Remove an involved user from a task
            responses: {}
        /unclaim:
          uriParameters:
            taskId:
              description: taskId
              type: string
              required: true
      #   #   displayName: taskId
          put:
    #   #   displayName: unclaimTaskUsingPUT
            description: Unclaim a task
            responses: {}
      get:
  #     displayName: getTaskUsingGET
        description: Task Details
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: TaskRepresentation
      put:
        body:
          application/json:
            schema: TaskUpdateRepresentation
  #     displayName: updateTaskUsingPUT
        description: Update Task Details
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: TaskRepresentation
      delete:
  #     displayName: deleteTaskUsingDELETE
        description: Delete a Task
        responses: {}
    post:
      body:
        application/json:
          schema: TaskRepresentation
  #   displayName: createNewTaskUsingPOST
      description: Create a Standalone Task
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: TaskRepresentation
  /process-definitions:
    /{processDefinitionId}:
      /decision-tables:
        uriParameters:
          processDefinitionId:
            description: processDefinitionId
            type: string
            required: true
    #   #   displayName: processDefinitionId
        get:
  #   #   displayName: getProcessDefinitionDecisionTablesUsingGET
          description: getProcessDefinitionDecisionTables
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
      /forms:
        uriParameters:
          processDefinitionId:
            description: processDefinitionId
            type: string
            required: true
    #   #   displayName: processDefinitionId
        get:
  #   #   displayName: getProcessDefinitionFormsUsingGET
          description: getProcessDefinitionForms
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
      /identitylinks:
        uriParameters:
          processDefinitionId:
            description: processDefinitionId
            type: string
            required: true
    #   #   displayName: processDefinitionId
        /{family}:
          uriParameters:
            processDefinitionId:
              description: processDefinitionId
              type: string
              required: true
      #   #   displayName: processDefinitionId
            family:
              description: family
              type: string
              required: true
      #   #   displayName: family
          /{identityId}:
            uriParameters:
              processDefinitionId:
                description: processDefinitionId
                type: string
                required: true
        #   #   displayName: processDefinitionId
              family:
                description: family
                type: string
                required: true
        #   #   displayName: family
              identityId:
                description: identityId
                type: string
                required: true
        #   #   displayName: identityId
            get:
      #   #   displayName: getIdentityLinkTypeUsingGET
              description: getIdentityLinkType
              responses:
                200:
                  description: OK
                  body:
                    application/json:
                      schema: IdentityLinkRepresentation
            delete:
      #   #   displayName: deleteIdentityLinkUsingDELETE
              description: deleteIdentityLink
              responses: {}
          get:
    #   #   displayName: getIdentityLinksForFamilyUsingGET
            description: getIdentityLinksForFamily
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: IdentityLinkRepresentation-array
        get:
  #   #   displayName: getIdentityLinksUsingGET
          description: getIdentityLinks
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: IdentityLinkRepresentation-array
        post:
          body:
            application/json:
              schema: IdentityLinkRepresentation
  #   #   displayName: createIdentityLinkUsingPOST
          description: createIdentityLink
          responses:
            200:
              description: Created
              body:
                application/json:
                  schema: IdentityLinkRepresentation
      /start-form:
        get:
  #   #   displayName: getProcessDefinitionStartFormUsingGET
          description: Retrieve the start form for a process definition
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormDefinitionRepresentation
      /start-form-values/{field}:
        /{column}:
          get:
    #   #   displayName: getRestTableFieldValuesUsingGET
            description: Retrieve field values (eg. the table field)
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: FormValueRepresentation-array
        get:
  #   #   displayName: getRestFieldValuesUsingGET
          description: Retrieve field values (eg. the typeahead field)
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormValueRepresentation-array
    get:
  #   displayName: getProcessDefinitionsUsingGET
      description: Retrieve a list of process definitions
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
      queryParameters:
        latest:
          description: latest
          type: boolean
          required: false
  #   #   displayName: latest
        appDefinitionId:
          description: appDefinitionId
          type: integer
          required: false
  #   #   displayName: appDefinitionId
        deploymentId:
          description: deploymentId
          type: string
          required: false
  #   #   displayName: deploymentId
  /process-instances:
    /filter:
      post:
        body:
          application/json:
            schema: ProcessInstanceFilterRequestRepresentation
  #     displayName: filterProcessInstancesUsingPOST
        description: Filter a list of process instances
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
    /query:
      post:
        body: {}
  #     displayName: getProcessInstancesUsingPOST
        description: Retrieve a list of process instances
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
    /{processInstanceId}:
      uriParameters:
        processInstanceId:
          description: processInstanceId
          type: string
          required: true
  #   #   displayName: processInstanceId
      /variables:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        /{variableName}:
          uriParameters:
            processInstanceId:
              description: processInstanceId
              type: string
              required: true
      #   #   displayName: processInstanceId
            variableName:
              description: variableName
              type: string
              required: true
      #   #   displayName: variableName
          get:
    #   #   displayName: getProcessInstanceVariableUsingGET
            description: getProcessInstanceVariable
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: RestVariable
          put:
            body:
              application/json:
                schema: RestVariable
    #   #   displayName: updateProcessInstanceVariableUsingPUT
            description: updateProcessInstanceVariable
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: RestVariable
          delete:
    #   #   displayName: deleteProcessInstanceVariableUsingDELETE
            description: deleteProcessInstanceVariable
            responses: {}
        get:
  #   #   displayName: getProcessInstanceVariablesUsingGET
          description: getProcessInstanceVariables
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RestVariable-array
        put:
          body:
            application/json:
              schema: RestVariable-array
  #   #   displayName: createOrUpdateProcessInstanceVariablesUsingPUT
          description: createOrUpdateProcessInstanceVariables
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RestVariable-array
        post:
          body:
            application/json:
              schema: RestVariable-array
  #   #   displayName: createProcessInstanceVariablesUsingPOST
          description: createProcessInstanceVariables
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RestVariable-array
      /content:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getRelatedContentForProcessInstanceUsingGET
          description: getRelatedContentForProcessInstance
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            isRelatedContent:
              description: isRelatedContent
              type: boolean
              required: false
      #   #   displayName: isRelatedContent
        post:
          body:
            application/json:
              schema: RelatedContentRepresentation
  #   #   displayName: createRelatedContentOnProcessInstanceUsingPOST
          description: createRelatedContentOnProcessInstance
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RelatedContentRepresentation
          queryParameters:
            isRelatedContent:
              description: isRelatedContent
              type: boolean
              required: false
      #   #   displayName: isRelatedContent
      /field-content:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getProcessInstanceContentUsingGET
          description: Retrieve content attached to process instance fields
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
      /raw-content:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        post:
  #   #   displayName: createRelatedContentOnProcessInstanceUsingPOST_1
          description: createRelatedContentOnProcessInstance
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RelatedContentRepresentation
          queryParameters:
            isRelatedContent:
              description: isRelatedContent
              type: boolean
              required: false
      #   #   displayName: isRelatedContent
          body:
            application/x-www-form-urlencoded:
              formParameters:
                file:
                  description: file
                  type: file
                  required: true
      #   #   displayName: file
      /activate:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        put:
  #   #   displayName: activateProcessInstanceUsingPUT
          description: activateProcessInstance
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ProcessInstanceRepresentation
      /audit-log:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getTaskAuditLogUsingGET
          description: getTaskAuditLog
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ProcessInstanceAuditInfoRepresentation
      /comments:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getProcessInstanceCommentsUsingGET
          description: Comment list added to Process
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            latestFirst:
              description: latestFirst
              type: boolean
              required: false
      #   #   displayName: latestFirst
        post:
          body:
            application/json:
              schema: CommentRepresentation
  #   #   displayName: addProcessInstanceCommentUsingPOST
          description: Add a comment to a Process
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: CommentRepresentation
      /decision-tasks:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getHistoricProcessInstanceDecisionTasksUsingGET
          description: getHistoricProcessInstanceDecisionTasks
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
      /diagram:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getProcessInstanceDiagramUsingGET
          description: getProcessInstanceDiagram
          responses:
            200:
              description: OK
      /historic-variables:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getHistoricProcessInstanceVariablesUsingGET
          description: getHistoricProcessInstanceVariables
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ProcessInstanceVariableRepresentation-array
      /identitylinks:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        /{family}:
          uriParameters:
            processInstanceId:
              description: processInstanceId
              type: string
              required: true
      #   #   displayName: processInstanceId
            family:
              description: family
              type: string
              required: true
      #   #   displayName: family
          /{identityId}/{type}:
            uriParameters:
              processInstanceId:
                description: processInstanceId
                type: string
                required: true
        #   #   displayName: processInstanceId
              family:
                description: family
                type: string
                required: true
        #   #   displayName: family
              identityId:
                description: identityId
                type: string
                required: true
        #   #   displayName: identityId
              type:
                description: type
                type: string
                required: true
        #   #   displayName: type
            get:
      #   #   displayName: getIdentityLinkTypeUsingGET_1
              description: getIdentityLinkType
              responses:
                200:
                  description: OK
                  body:
                    application/json:
                      schema: IdentityLinkRepresentation
            delete:
      #   #   displayName: deleteIdentityLinkUsingDELETE_1
              description: deleteIdentityLink
              responses: {}
          get:
    #   #   displayName: getIdentityLinksForFamilyUsingGET_1
            description: getIdentityLinksForFamily
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: IdentityLinkRepresentation-array
        get:
  #   #   displayName: getIdentityLinksUsingGET_1
          description: getIdentityLinks
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: IdentityLinkRepresentation-array
        post:
          body:
            application/json:
              schema: IdentityLinkRepresentation
  #   #   displayName: createIdentityLinkUsingPOST_1
          description: createIdentityLink
          responses:
            200:
              description: Created
              body:
                application/json:
                  schema: IdentityLinkRepresentation
      /suspend:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        put:
  #   #   displayName: suspendProcessInstanceUsingPUT
          description: suspendProcessInstance
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ProcessInstanceRepresentation
      /start-form:
        uriParameters:
          processInstanceId:
            description: processInstanceId
            type: string
            required: true
    #   #   displayName: processInstanceId
        get:
  #   #   displayName: getProcessInstanceStartFormUsingGET
          description: Get process start form
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormDefinitionRepresentation
      get:
  #     displayName: getProcessInstanceUsingGET
        description: Retrieve a process instance information
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ProcessInstanceRepresentation
      delete:
  #     displayName: deleteProcessInstanceUsingDELETE
        description: Delete a process instance
        responses: {}
    post:
      body:
        application/json:
          schema: CreateProcessInstanceRepresentation
  #   displayName: startNewProcessInstanceUsingPOST
      description: Start a process instance
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ProcessInstanceRepresentation
  /runtime-app-definitions:
    /{appDefinitionId}:
      uriParameters:
        appDefinitionId:
          description: appDefinitionId
          type: integer
          required: true
  #   #   displayName: appDefinitionId
      get:
  #     displayName: getAppDefinitionUsingGET_1
        description: getAppDefinition
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: AppDefinitionRepresentation
    get:
  #   displayName: getAppDefinitionsUsingGET
      description: List runtime apps
      responses:
        200:
          description: OK
          body:
            application/json:
              schema: ResultListDataRepresentation
    post:
      body:
        application/json:
          schema: RuntimeAppDefinitionSaveRepresentation
  #   displayName: deployAppDefinitionsUsingPOST
      description: Deploy published app
      responses: {}
  /script-files:
    /controllers:
      get:
  #     displayName: getControllersUsingGET
        description: getControllers
        responses:
          200:
            description: OK
    /libraries:
      get:
  #     displayName: getLibrariesUsingGET
        description: getLibraries
        responses:
          200:
            description: OK
  /admin:
    /groups:
      /{groupId}:
        uriParameters:
          groupId:
            description: groupId
            type: integer
            required: true
    #   #   displayName: groupId
        /action/activate:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
          post:
    #   #   displayName: activateUsingPOST
            description: activate
            responses: {}
        /add-all-users:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
          post:
    #   #   displayName: addAllUsersToGroupUsingPOST
            description: addAllUsersToGroup
            responses: {}
        /capabilities:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
          /{groupCapabilityId}:
            uriParameters:
              groupId:
                description: groupId
                type: integer
                required: true
        #   #   displayName: groupId
              groupCapabilityId:
                description: groupCapabilityId
                type: integer
                required: true
        #   #   displayName: groupCapabilityId
            delete:
      #   #   displayName: deleteGroupCapabilityUsingDELETE
              description: deleteGroupCapability
              responses: {}
          post:
            body:
              application/json:
                schema: AddGroupCapabilitiesRepresentation
    #   #   displayName: addGroupCapabilitiesUsingPOST
            description: addGroupCapabilities
            responses: {}
        /members/{userId}:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
            userId:
              description: userId
              type: integer
              required: true
      #   #   displayName: userId
          post:
    #   #   displayName: addGroupMemberUsingPOST
            description: addGroupMember
            responses: {}
          delete:
    #   #   displayName: deleteGroupMemberUsingDELETE
            description: deleteGroupMember
            responses: {}
        /potential-capabilities:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
          get:
    #   #   displayName: getCapabilitiesUsingGET
            description: getCapabilities
            responses:
              200:
                description: OK
        /related-groups:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
          /{relatedGroupId}:
            uriParameters:
              groupId:
                description: groupId
                type: integer
                required: true
        #   #   displayName: groupId
              relatedGroupId:
                description: relatedGroupId
                type: integer
                required: true
        #   #   displayName: relatedGroupId
            post:
      #   #   displayName: addRelatedGroupUsingPOST
              description: addRelatedGroup
              responses: {}
              queryParameters:
                type:
                  description: type
                  type: string
                  required: true
          #   #   displayName: type
            delete:
      #   #   displayName: deleteRelatedGroupUsingDELETE
              description: deleteRelatedGroup
              responses: {}
          get:
    #   #   displayName: getRelatedGroupsUsingGET
            description: getRelatedGroups
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: LightGroupRepresentation-array
        /users:
          uriParameters:
            groupId:
              description: groupId
              type: integer
              required: true
      #   #   displayName: groupId
          get:
    #   #   displayName: getGroupUsersUsingGET
            description: getGroupUsers
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ResultListDataRepresentation
            queryParameters:
              filter:
                description: filter
                type: string
                required: false
        #   #   displayName: filter
              page:
                description: page
                type: integer
                required: false
        #   #   displayName: page
              pageSize:
                description: pageSize
                type: integer
                required: false
        #   #   displayName: pageSize
        get:
  #   #   displayName: getGroupUsingGET
          description: getGroup
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: AbstractGroupRepresentation
          queryParameters:
            includeAllUsers:
              description: includeAllUsers
              type: boolean
              required: false
      #   #   displayName: includeAllUsers
            summary:
              description: summary
              type: boolean
              required: false
      #   #   displayName: summary
        put:
          body:
            application/json:
              schema: GroupRepresentation
  #   #   displayName: updateGroupUsingPUT
          description: updateGroup
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: GroupRepresentation
        delete:
  #   #   displayName: deleteGroupUsingDELETE
          description: deleteGroup
          responses: {}
      get:
  #     displayName: getGroupsUsingGET_1
        description: getGroups
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: LightGroupRepresentation-array
        queryParameters:
          tenantId:
            description: tenantId
            type: integer
            required: false
    #   #   displayName: tenantId
          functional:
            description: functional
            type: boolean
            required: false
    #   #   displayName: functional
          summary:
            description: summary
            type: boolean
            required: false
    #   #   displayName: summary
      post:
        body:
          application/json:
            schema: GroupRepresentation
  #     displayName: createNewGroupUsingPOST
        description: createNewGroup
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: GroupRepresentation
    /users:
      /{userId}:
        uriParameters:
          userId:
            description: userId
            type: integer
            required: true
    #   #   displayName: userId
        get:
  #   #   displayName: getUserUsingGET
          description: Retrieve user information
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: AbstractUserRepresentation
          queryParameters:
            summary:
              description: summary
              type: boolean
              required: false
      #   #   displayName: summary
        put:
          body:
            application/json:
              schema: UserRepresentation
  #   #   displayName: updateUserDetailsUsingPUT
          description: Update user details
          responses: {}
      get:
  #     displayName: getUsersUsingGET
        description: Get a list of users
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          filter:
            description: filter
            type: string
            required: false
    #   #   displayName: filter
          status:
            description: status
            type: string
            required: false
    #   #   displayName: status
          accountType:
            description: accountType
            type: string
            required: false
    #   #   displayName: accountType
          sort:
            description: sort
            type: string
            required: false
    #   #   displayName: sort
          company:
            description: company
            type: string
            required: false
    #   #   displayName: company
          start:
            description: start
            type: integer
            required: false
    #   #   displayName: start
          page:
            description: page
            type: integer
            required: false
    #   #   displayName: page
          size:
            description: size
            type: integer
            required: false
    #   #   displayName: size
          groupId:
            description: groupId
            type: integer
            required: false
    #   #   displayName: groupId
          tenantId:
            description: tenantId
            type: integer
            required: false
    #   #   displayName: tenantId
          summary:
            description: summary
            type: boolean
            required: false
    #   #   displayName: summary
      put:
        body:
          application/json:
            schema: BulkUserUpdateRepresentation
  #     displayName: bulkUpdateUsersUsingPUT
        description: Bulk Update a list of users
        responses: {}
      post:
        body:
          application/json:
            schema: UserRepresentation
  #     displayName: createNewUserUsingPOST
        description: Create a new user
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: UserRepresentation
    /basic-auths:
      /{basicAuthId}:
        uriParameters:
          basicAuthId:
            description: basicAuthId
            type: integer
            required: true
    #   #   displayName: basicAuthId
        get:
  #   #   displayName: getBasicAuthConfigurationUsingGET
          description: getBasicAuthConfiguration
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: EndpointBasicAuthRepresentation
          queryParameters:
            tenantId:
              description: tenantId
              type: integer
              required: true
      #   #   displayName: tenantId
        put:
          body:
            application/json:
              schema: CreateEndpointBasicAuthRepresentation
  #   #   displayName: updateBasicAuthConfigurationUsingPUT
          description: updateBasicAuthConfiguration
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: EndpointBasicAuthRepresentation
        delete:
  #   #   displayName: removeBasicAuthonfigurationUsingDELETE
          description: removeBasicAuthonfiguration
          responses: {}
          queryParameters:
            tenantId:
              description: tenantId
              type: integer
              required: true
      #   #   displayName: tenantId
      get:
  #     displayName: getBasicAuthConfigurationsUsingGET
        description: getBasicAuthConfigurations
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: EndpointBasicAuthRepresentation-array
        queryParameters:
          tenantId:
            description: tenantId
            type: integer
            required: true
    #   #   displayName: tenantId
      post:
        body:
          application/json:
            schema: CreateEndpointBasicAuthRepresentation
  #     displayName: createBasicAuthConfigurationUsingPOST
        description: createBasicAuthConfiguration
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: EndpointBasicAuthRepresentation
    /endpoints:
      /{endpointConfigurationId}:
        uriParameters:
          endpointConfigurationId:
            description: endpointConfigurationId
            type: integer
            required: true
    #   #   displayName: endpointConfigurationId
        get:
  #   #   displayName: getEndpointConfigurationUsingGET_1
          description: getEndpointConfiguration
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: EndpointConfigurationRepresentation
          queryParameters:
            tenantId:
              description: tenantId
              type: integer
              required: true
      #   #   displayName: tenantId
        put:
          body:
            application/json:
              schema: EndpointConfigurationRepresentation
  #   #   displayName: updateEndpointConfigurationUsingPUT
          description: updateEndpointConfiguration
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: EndpointConfigurationRepresentation
        delete:
  #   #   displayName: removeEndpointConfigurationUsingDELETE
          description: removeEndpointConfiguration
          responses: {}
          queryParameters:
            tenantId:
              description: tenantId
              type: integer
              required: true
      #   #   displayName: tenantId
      get:
  #     displayName: getEndpointConfigurationsUsingGET_1
        description: getEndpointConfigurations
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: EndpointConfigurationRepresentation-array
        queryParameters:
          tenantId:
            description: tenantId
            type: integer
            required: true
    #   #   displayName: tenantId
      post:
        body:
          application/json:
            schema: EndpointConfigurationRepresentation
  #     displayName: createEndpointConfigurationUsingPOST
        description: createEndpointConfiguration
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: EndpointConfigurationRepresentation
    /tenants:
      /{tenantId}:
        uriParameters:
          tenantId:
            description: tenantId
            type: integer
            required: true
    #   #   displayName: tenantId
        /events:
          uriParameters:
            tenantId:
              description: tenantId
              type: integer
              required: true
      #   #   displayName: tenantId
          get:
    #   #   displayName: getTenantEventsUsingGET
            description: Get tenant events
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: TenantEvent-array
        /logo:
          uriParameters:
            tenantId:
              description: tenantId
              type: integer
              required: true
      #   #   displayName: tenantId
          get:
    #   #   displayName: getTenantLogoUsingGET
            description: Get tenant logo
            responses: {}
          post:
    #   #   displayName: uploadTenantLogoUsingPOST
            description: Update tenant logo
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ImageUploadRepresentation
            body:
              application/x-www-form-urlencoded:
                formParameters:
                  file:
                    description: file
                    type: file
                    required: true
        #   #   displayName: file
        get:
  #   #   displayName: getTenantUsingGET
          description: Get tenant details
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: TenantRepresentation
        put:
          body:
            application/json:
              schema: CreateTenantRepresentation
  #   #   displayName: updateUsingPUT
          description: Update a tenant
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: TenantRepresentation
        delete:
  #   #   displayName: deleteTenantUsingDELETE
          description: Delete a tenant
          responses: {}
      get:
  #     displayName: getTenantsUsingGET
        description: Get all tenants
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: LightTenantRepresentation-array
      post:
        body:
          application/json:
            schema: CreateTenantRepresentation
  #     displayName: createTenantUsingPOST
        description: Create a new tenant
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: LightTenantRepresentation
  /app-definitions:
    /publish-app:
      post:
  #     displayName: importAndPublishAppUsingPOST
        description: importAndPublishApp
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: AppDefinitionUpdateResultRepresentation
        body:
          application/x-www-form-urlencoded:
            formParameters:
              file:
                description: file
                type: file
                required: true
    #   #   displayName: file
    /{modelId}:
      uriParameters:
        modelId:
          description: modelId
          type: integer
          required: true
  #   #   displayName: modelId
      /publish-app:
        uriParameters:
          modelId:
            description: modelId
            type: integer
            required: true
    #   #   displayName: modelId
        post:
  #   #   displayName: importAndPublishAppUsingPOST_1
          description: importAndPublishApp
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: AppDefinitionUpdateResultRepresentation
          body:
            application/x-www-form-urlencoded:
              formParameters:
                file:
                  description: file
                  type: file
                  required: true
      #   #   displayName: file
      /export:
        uriParameters:
          modelId:
            description: modelId from a runtime app or the id of an app definition model
            type: integer
            required: true
    #   #   displayName: modelId
        get:
  #   #   displayName: exportAppDefinitionUsingGET
          description: Export App Definition
          responses:
            400:
              description: No application definition id provided
            500:
              description: Could not deserialize app definition <div><b>or</b></div> Model contains validation errors, please fix the issues in the editor <div><b>or</b></div> Could not generate app definition zip archive
            403:
              description: User has no sufficient capabilities or permissions
      /import:
        uriParameters:
          modelId:
            description: modelId
            type: integer
            required: true
    #   #   displayName: modelId
        post:
  #   #   displayName: importAppDefinitionUsingPOST_1
          description: Import App
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: AppDefinitionRepresentation
          body:
            application/x-www-form-urlencoded:
              formParameters:
                file:
                  description: file
                  type: file
                  required: true
      #   #   displayName: file
      /publish:
        uriParameters:
          modelId:
            description: modelId
            type: integer
            required: true
    #   #   displayName: modelId
        post:
          body:
            application/json:
              schema: AppDefinitionPublishRepresentation
  #   #   displayName: publishAppDefinitionUsingPOST
          description: Publish App
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: AppDefinitionUpdateResultRepresentation
      get:
  #     displayName: getAppDefinitionUsingGET
        description: getAppDefinition
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: AppDefinitionRepresentation
      put:
        body:
          application/json:
            schema: AppDefinitionSaveRepresentation
  #     displayName: updateAppDefinitionUsingPUT
        description: updateAppDefinition
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: AppDefinitionUpdateResultRepresentation
    /import:
      post:
  #     displayName: importAppDefinitionUsingPOST
        description: Import App Definition
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: AppDefinitionRepresentation
        body:
          application/x-www-form-urlencoded:
            formParameters:
              file:
                description: file
                type: file
                required: true
    #   #   displayName: file
  /decisions:
    /audits:
      /{auditTrailId}:
        uriParameters:
          auditTrailId:
            description: auditTrailId
            type: integer
            required: true
    #   #   displayName: auditTrailId
        get:
  #   #   displayName: getAuditTrailUsingGET
          description: getAuditTrail
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: DecisionAuditRepresentation
      get:
  #     displayName: getAuditTrailsUsingGET
        description: getAuditTrails
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          decisionKey:
            description: decisionKey
            type: string
            required: true
    #   #   displayName: decisionKey
          dmnDeploymentId:
            description: dmnDeploymentId
            type: integer
            required: true
    #   #   displayName: dmnDeploymentId
    /decision-tables:
      /{decisionTableId}:
        uriParameters:
          decisionTableId:
            description: decisionTableId
            type: integer
            required: true
    #   #   displayName: decisionTableId
        /editorJson:
          uriParameters:
            decisionTableId:
              description: decisionTableId
              type: integer
              required: true
      #   #   displayName: decisionTableId
          get:
    #   #   displayName: getDecisionTableEditorJsonUsingGET
            description: getDecisionTableEditorJson
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: JsonNode
        get:
  #   #   displayName: getDecisionTableUsingGET
          description: getDecisionTable
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: RuntimeDecisionTableRepresentation
      get:
  #     displayName: getDecisionTablesUsingGET
        description: getDecisionTables
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          nameLike:
            description: nameLike
            type: string
            required: false
    #   #   displayName: nameLike
          keyLike:
            description: keyLike
            type: string
            required: false
    #   #   displayName: keyLike
          tenantIdLike:
            description: tenantIdLike
            type: string
            required: false
    #   #   displayName: tenantIdLike
          deploymentId:
            description: deploymentId
            type: integer
            required: false
    #   #   displayName: deploymentId
          sort:
            description: sort
            type: string
            required: false
    #   #   displayName: sort
          order:
            description: order
            type: string
            required: false
    #   #   displayName: order
          start:
            description: start
            type: integer
            required: false
    #   #   displayName: start
          size:
            description: size
            type: integer
            required: false
    #   #   displayName: size
  /editor:
    /form-models:
      /values:
        get:
  #   #   displayName: getFormsUsingGET
          description: getForms
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormRepresentation-array
      /{formId}:
        uriParameters:
          formId:
            description: formId
            type: integer
            required: true
    #   #   displayName: formId
        /history/{formHistoryId}:
          uriParameters:
            formId:
              description: formId
              type: integer
              required: true
      #   #   displayName: formId
            formHistoryId:
              description: formHistoryId
              type: integer
              required: true
      #   #   displayName: formHistoryId
          get:
    #   #   displayName: getFormHistoryUsingGET
            description: getFormHistory
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: FormRepresentation
        /validate:
          uriParameters:
            formId:
              description: formId
              type: integer
              required: true
      #   #   displayName: formId
          put:
            body:
              application/json:
                schema: FormSaveRepresentation
    #   #   displayName: validateModelUsingPUT
            description: validateModel
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ValidationErrorRepresentation-array
        get:
  #   #   displayName: getFormUsingGET
          description: getForm
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormRepresentation
        put:
          body:
            application/json:
              schema: FormSaveRepresentation
  #   #   displayName: saveFormUsingPUT
          description: saveForm
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: FormRepresentation
      get:
  #     displayName: getFormsUsingGET_1
        description: getForms
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
    /endpoints:
      /{endpointConfigurationId}:
        uriParameters:
          endpointConfigurationId:
            description: endpointConfigurationId
            type: integer
            required: true
    #   #   displayName: endpointConfigurationId
        get:
  #   #   displayName: getEndpointConfigurationUsingGET
          description: getEndpointConfiguration
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: EndpointConfigurationRepresentation
      get:
  #     displayName: getEndpointConfigurationsUsingGET
        description: getEndpointConfigurations
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: EndpointConfigurationRepresentation-array
    /data-sources:
      get:
  #     displayName: getDataSourcesUsingGET
        description: getDataSources
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          tenantId:
            description: tenantId
            type: integer
            required: false
    #   #   displayName: tenantId
  /filters:
    /processes:
      /{userFilterId}:
        uriParameters:
          userFilterId:
            description: userFilterId
            type: integer
            required: true
    #   #   displayName: userFilterId
        get:
  #   #   displayName: getUserProcessInstanceFilterUsingGET
          description: Get a specific user process instance task filter
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: UserProcessInstanceFilterRepresentation
        put:
          body:
            application/json:
              schema: UserProcessInstanceFilterRepresentation
  #   #   displayName: updateUserProcessInstanceFilterUsingPUT
          description: Update a user process instance task filter
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: UserProcessInstanceFilterRepresentation
        delete:
  #   #   displayName: deleteUserProcessInstanceFilterUsingDELETE
          description: Delete a user process instance task filter
          responses: {}
      get:
  #     displayName: getUserProcessInstanceFiltersUsingGET
        description: Retrieve list of taks filters
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          appId:
            description: appId
            type: integer
            required: false
    #   #   displayName: appId
      put:
        body:
          application/json:
            schema: UserFilterOrderRepresentation
  #     displayName: orderUserProcessInstanceFiltersUsingPUT
        description: To order the list of user process instance filters
        responses: {}
      post:
        body:
          application/json:
            schema: UserProcessInstanceFilterRepresentation
  #     displayName: createUserProcessInstanceFilterUsingPOST
        description: Create a user process instance task filter
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: UserProcessInstanceFilterRepresentation
    /tasks:
      /{userFilterId}:
        uriParameters:
          userFilterId:
            description: userFilterId
            type: integer
            required: true
    #   #   displayName: userFilterId
        get:
  #   #   displayName: getUserTaskFilterUsingGET
          description: Get a specific task filter
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: UserTaskFilterRepresentation
        put:
          body:
            application/json:
              schema: UserTaskFilterRepresentation
  #   #   displayName: updateUserTaskFilterUsingPUT
          description: Update a specific task filter
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: UserTaskFilterRepresentation
        delete:
  #   #   displayName: deleteUserTaskFilterUsingDELETE
          description: Delete a task filter
          responses: {}
      get:
  #     displayName: getUserTaskFiltersUsingGET
        description: Retrieve list of task filters
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ResultListDataRepresentation
        queryParameters:
          appId:
            description: appId
            type: integer
            required: false
    #   #   displayName: appId
      put:
        body:
          application/json:
            schema: UserFilterOrderRepresentation
  #     displayName: orderUserTaskFiltersUsingPUT
        description: To order the list of user task filters
        responses: {}
      post:
        body:
          application/json:
            schema: UserTaskFilterRepresentation
  #     displayName: createUserTaskFilterUsingPOST
        description: Create a new task filter
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: UserTaskFilterRepresentation
  /temporary:
    /example-headers:
      get:
  #     displayName: getHeadersUsingGET
        description: getHeaders
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ArrayNode
    /example-options:
      get:
  #     displayName: getOptionsUsingGET
        description: getOptions
        responses:
          200:
            description: OK
            body:
              application/json:
                schema: ArrayNode
    /generate-report-data:
      /complete-tasks:
        get:
  #   #   displayName: completeTasksUsingGET
          description: completeTasks
          responses: {}
          queryParameters:
            userId:
              description: userId
              type: integer
              required: true
      #   #   displayName: userId
            processDefinitionKey:
              description: processDefinitionKey
              type: string
              required: true
      #   #   displayName: processDefinitionKey
      /start-process:
        get:
  #   #   displayName: generateDataUsingGET
          description: generateData
          responses: {}
          queryParameters:
            userId:
              description: userId
              type: integer
              required: true
      #   #   displayName: userId
            processDefinitionKey:
              description: processDefinitionKey
              type: string
              required: true
      #   #   displayName: processDefinitionKey
  /integration:
    /alfresco-cloud:
      /confirm-auth-request:
        get:
  #   #   displayName: confirmAuthorisationUsingGET
          description: Alfresco Cloud Authorization
          responses: {}
          queryParameters:
            code:
              description: code
              type: string
              required: true
      #   #   displayName: code
      /networks:
        /{networkId}:
          /folders/{folderId}/content:
            uriParameters:
              networkId:
                description: networkId
                type: string
                required: true
        #   #   displayName: networkId
              folderId:
                description: folderId
                type: string
                required: true
        #   #   displayName: folderId
            get:
      #   #   displayName: getContentInFolderUsingGET
              description: List file & folders inside a specific folder
              responses:
                200:
                  description: OK
                  body:
                    application/json:
                      schema: ResultListDataRepresentation
          /sites:
            uriParameters:
              networkId:
                description: networkId
                type: string
                required: true
        #   #   displayName: networkId
            /{siteId}/content:
              uriParameters:
                networkId:
                  description: networkId
                  type: string
                  required: true
          #   #   displayName: networkId
                siteId:
                  description: siteId
                  type: string
                  required: true
          #   #   displayName: siteId
              get:
        #   #   displayName: getContentInSiteUsingGET
                description: List file & folders inside a specific site
                responses:
                  200:
                    description: OK
                    body:
                      application/json:
                        schema: ResultListDataRepresentation
            get:
      #   #   displayName: getAllSitesUsingGET
              description: List Alfresco sites
              responses:
                200:
                  description: OK
                  body:
                    application/json:
                      schema: ResultListDataRepresentation
        get:
  #   #   displayName: getAllNetworksUsingGET
          description: List Alfresco networks
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
    /alfresco/{repositoryId}:
      /folders/{folderId}/content:
        uriParameters:
          repositoryId:
            description: repositoryId
            type: string
            required: true
    #   #   displayName: repositoryId
          folderId:
            description: folderId
            type: string
            required: true
    #   #   displayName: folderId
        get:
  #   #   displayName: getContentInFolderUsingGET_1
          description: List file & folders inside a specific folder
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
      /sites:
        uriParameters:
          repositoryId:
            description: repositoryId
            type: string
            required: true
    #   #   displayName: repositoryId
        /{siteId}/content:
          uriParameters:
            repositoryId:
              description: repositoryId
              type: string
              required: true
      #   #   displayName: repositoryId
            siteId:
              description: siteId
              type: string
              required: true
      #   #   displayName: siteId
          get:
    #   #   displayName: getContentInSiteUsingGET_1
            description: List file & folders inside a specific site
            responses:
              200:
                description: OK
                body:
                  application/json:
                    schema: ResultListDataRepresentation
        get:
  #   #   displayName: getAllSitesUsingGET_1
          description: List Alfresco sites
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
    /box:
      /confirm-auth-request:
        get:
  #   #   displayName: confirmAuthorisationUsingGET_1
          description: Box Authorization
          responses: {}
      /files:
        get:
  #   #   displayName: getFilesUsingGET
          description: List file & folders
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            filter:
              description: filter
              type: string
              required: false
      #   #   displayName: filter
            parent:
              description: parent
              type: string
              required: false
      #   #   displayName: parent
      /status:
        get:
  #   #   displayName: getBoxPluginStatusUsingGET
          description: Retrieve if Box Integration is enabled
          responses:
            200:
              description: OK
      /{userId}/account:
        uriParameters:
          userId:
            description: userId
            type: integer
            required: true
    #   #   displayName: userId
        get:
  #   #   displayName: getRepositoryAccountUsingGET
          description: List Box Account
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: BoxUserAccountCredentialsRepresentation
        put:
          body:
            application/json:
              schema: UserAccountCredentialsRepresentation
  #   #   displayName: updateRepositoryAccountUsingPUT
          description: Update Box account
          responses: {}
        post:
          body:
            application/json:
              schema: UserAccountCredentialsRepresentation
  #   #   displayName: createRepositoryAccountUsingPOST
          description: Create Box account
          responses: {}
        delete:
  #   #   displayName: deleteRepositoryAccountUsingDELETE
          description: Delete Box account
          responses: {}
    /google-drive:
      /confirm-auth-request:
        get:
  #   #   displayName: confirmAuthorisationUsingGET_2
          description: Drive Authorization
          responses: {}
      /files:
        get:
  #   #   displayName: getFilesUsingGET_1
          description: List file & folders
          responses:
            200:
              description: OK
              body:
                application/json:
                  schema: ResultListDataRepresentation
          queryParameters:
            filter:
              description: filter
              type: string
              required: false
      #   #   displayName: filter
            parent:
              description: parent
              type: string
              required: false
      #   #   displayName: parent
            currentFolderOnly:
              description: currentFolderOnly
              type: boolean
              required: false
      #   #   displayName: currentFolderOnly
